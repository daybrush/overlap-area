{"version":3,"file":"overlap-area.min.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import { throttle, TINY_NUM } from \"@daybrush/utils\";\n\nexport function tinyThrottle(num: number) {\n    return throttle(num, TINY_NUM);\n}\n\nexport function isSameConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n) {\n    return linearConstants1.every((v, i) => tinyThrottle(v - linearConstants2[i]) === 0);\n}\n\nexport function isSamePoint(\n    point1: number[],\n    point2: number[],\n) {\n    return !tinyThrottle(point1[0] - point2[0]) && !tinyThrottle(point1[1] - point2[1]);\n}\n\nexport function flat<Type extends any>(arr: Type[][]): Type[] {\n    return arr.reduce<Type[]>((prev, current) => {\n        prev.push(...current);\n        return prev;\n    }, []);\n}\n","import { sum, findIndex, getShapeDirection, getDist, throttle, TINY_NUM, find } from \"@daybrush/utils\";\nimport { OverlapPointInfo, PointInfo, Rect } from \"./types\";\nimport { flat, isSameConstants, isSamePoint, tinyThrottle } from \"./utils\";\n\n/**\n * @namespace OverlapArea\n */\n\n/**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */\nexport function getAreaSize(points: number[][]): number {\n    if (points.length < 3) {\n        return 0;\n    }\n    return Math.abs(sum(points.map((point, i) => {\n        const nextPoint = points[i + 1] || points[0];\n\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n\n\n/**\n * Get points that fit the rect,\n * @memberof OverlapArea\n */\nexport function fitPoints(points: number[][], rect: Rect): number[][] {\n    const { width, height, left, top } = rect;\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const ratioX = width / (maxX - minX);\n    const ratioY = height / (maxY - minY);\n\n    return points.map(point => {\n        return [\n            left + (point[0] - minX) * ratioX,\n            top + (point[1] - minY) * ratioY,\n        ];\n    });\n}\n/**\n * Get the minimum and maximum points of the points.\n * @memberof OverlapArea\n */\nexport function getMinMaxs(points: number[][]): { minX: number, minY: number, maxX: number, maxY: number } {\n    const xs = points.map(point => point[0]);\n    const ys = points.map(point => point[1]);\n\n    return {\n        minX: Math.min(...xs),\n        minY: Math.min(...ys),\n        maxX: Math.max(...xs),\n        maxY: Math.max(...ys),\n    };\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */\nexport function isInside(pos: number[], points: number[][], excludeLine?: boolean): boolean {\n    const [x, y] = pos;\n    const {\n        minX,\n        maxX,\n    } = getMinMaxs(points);\n\n    const xLine = [[minX, y], [maxX, y]];\n    const xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    const lines = convertLines(points);\n\n    interface IntersectionPosInfo {\n        pos: number[];\n        line: number[][];\n        type: \"intersection\" | \"point\" | \"line\";\n    }\n    const intersectionPosInfos: IntersectionPosInfo[] = [];\n\n    lines.forEach(line => {\n        const linearConstants = getLinearConstants(line[0], line[1]);\n        const standardPoint = line[0];\n\n        if (isSameConstants(xLinearConstants, linearConstants)) {\n            intersectionPosInfos.push({\n                pos: pos,\n                line,\n                type: \"line\",\n            });\n        } else {\n            const xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);\n\n            xPoints.forEach(point => {\n                if (line.some(linePoint => isSamePoint(linePoint, point))) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line,\n                        type: \"point\",\n                    });\n                } else if (tinyThrottle(standardPoint[1] - y) !== 0) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line,\n                        type: \"intersection\",\n                    });\n                }\n            })\n        }\n    });\n\n    if (!excludeLine) {\n        // on line\n        if (find(intersectionPosInfos, p => p[0] === x)) {\n            return true;\n        }\n    }\n    let intersectionCount = 0;\n    const xMap = {};\n\n    intersectionPosInfos.forEach(({ pos, type, line }) => {\n        if (pos[0] > x) {\n            return;\n        }\n        if (type === \"intersection\") {\n            ++intersectionCount;\n        } else if (type === \"line\") {\n            return;\n        } else if (type === \"point\") {\n            const point = find(line, linePoint => linePoint[1] !== y);\n            const prevValue = xMap[pos[0]];\n            const nextValue = point[1] > y ? 1 : -1;\n\n            if (!prevValue) {\n                xMap[pos[0]] = nextValue;\n            } else if (prevValue !== nextValue) {\n                ++intersectionCount;\n            }\n        }\n    });\n    return intersectionCount % 2 === 1;\n}\n/**\n * Get distance from point to constants. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getDistanceFromPointToConstants(\n    [a, b, c]: [number, number, number],\n    pos: number[],\n) {\n    return (a * pos[0] + b * pos[1] + c) / (a * a + b * b);\n}\n\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getLinearConstants(point1: number[], point2: number[]): [number, number, number] {\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    // ax + by + c = 0\n    // [a, b, c]\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n\n    // b > 0\n    // ax + by + c = 0\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    if (!dx) {\n        if (dy) {\n            // -x + 1 = 0\n            a = -1;\n            c = x1;\n        }\n    } else if (!dy) {\n        // y - 1 = 0\n        b = 1;\n        c = -y1;\n    } else {\n        // y = -a(x - x1) + y1\n        // ax + y + a * x1 - y1 = 0\n        a = -dy / dx;\n        b = 1;\n        c = -a * x1 - y1;\n    }\n\n    return [a, b, c] as [number, number, number];\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */\nexport function getIntersectionPointsByConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n): number[][] {\n    const [a1, b1, c1] = linearConstants1;\n    const [a2, b2, c2] = linearConstants2;\n\n    const isZeroA = a1 === 0 && a2 === 0;\n    const isZeroB = b1 === 0 && b2 === 0;\n    let results: number[][] = [];\n\n    if (isZeroA && isZeroB) {\n        return [];\n    } else if (isZeroA) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        const y1 = -c1 / b1;\n        const y2 = -c2 / b2;\n\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [-Infinity, y1],\n                [Infinity, y1],\n            ];\n        }\n    } else if (isZeroB) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        const x1 = -c1 / a1;\n        const x2 = -c2 / a2;\n\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [x1, -Infinity],\n                [x1, Infinity],\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        const y = -c1 / b1;\n        const x = -(b2 * y + c2) / a2;\n\n        results = [[x, y]];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        const y = -c2 / b2;\n        const x = -(b1 * y + c1) / a1;\n\n        results = [[x, y]];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        const x = - c1 / a1;\n        const y = -(a2 * x + c2) / b2;\n\n        results = [[x, y]];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        const x = - c2 / a2;\n        const y = -(a1 * x + c1) / b1;\n\n        results = [[x, y]];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        const x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        const y = -(a1 * x + c1) / b1;\n\n        results = [[x, y]];\n    }\n\n    return results.map(result => [result[0], result[1]]);\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */\nexport function getIntersectionPoints(\n    line1: number[][],\n    line2: number[][],\n    isLimit?: boolean,\n): number[][] {\n    const points = getIntersectionPointsByConstants(\n        getLinearConstants(line1[0], line1[1]),\n        getLinearConstants(line2[0], line2[1]),\n    );\n\n    if (isLimit) {\n        return getPointsOnLines(points, [line1, line2]);\n    }\n    return points;\n}\n\nexport function isPointOnLine(\n    pos: number[],\n    line: number[][],\n) {\n    const linearConstants = getLinearConstants(line[0], line[1]);\n\n    return tinyThrottle(getDistanceFromPointToConstants(linearConstants, pos)) === 0;\n}\n\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */\nexport function getPointsOnLines(\n    points: number[][],\n    lines: number[][][],\n): number[][] {\n    const minMaxs = lines.map(line => [0, 1].map(order => [\n        Math.min(line[0][order], line[1][order]),\n        Math.max(line[0][order], line[1][order]),\n    ]));\n    let results: number[][] = [];\n\n    if (points.length === 2) {\n        const [x, y] = points[0];\n        if (!tinyThrottle(x - points[1][0])) {\n            /// Math.max(minY1, minY2)\n            const top = Math.max(...minMaxs.map(minMax => minMax[1][0]));\n            /// Math.min(maxY1, miax2)\n            const bottom = Math.min(...minMaxs.map(minMax => minMax[1][1]));\n\n            if (tinyThrottle(top - bottom) > 0) {\n                return [];\n            }\n            results = [\n                [x, top],\n                [x, bottom],\n            ];\n        } else if (!tinyThrottle(y - points[1][1])) {\n            /// Math.max(minY1, minY2)\n            const left = Math.max(...minMaxs.map(minMax => minMax[0][0]));\n            /// Math.min(maxY1, miax2)\n            const right = Math.min(...minMaxs.map(minMax => minMax[0][1]));\n\n            if (tinyThrottle(left - right) > 0) {\n                return [];\n            }\n            results = [\n                [left, y],\n                [right, y],\n            ];\n        }\n    }\n\n    if (!results.length) {\n        results = points.filter(point => {\n            const [pointX, pointY] = point;\n\n            return minMaxs.every(minMax => {\n                return (0 <= tinyThrottle(pointX - minMax[0][0]) && 0 <= tinyThrottle(minMax[0][1] - pointX))\n                && (0 <= tinyThrottle(pointY - minMax[1][0]) && 0 <= tinyThrottle(minMax[1][1] - pointY));\n            });\n        });\n    }\n\n    return results.map(result => [tinyThrottle(result[0]), tinyThrottle(result[1])]);\n\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/\nexport function convertLines(points: number[][]): number[][][] {\n    return [...points.slice(1), points[0]].map((point, i) => [points[i], point]);\n}\n\nfunction getOverlapPointInfos(points1: number[][], points2: number[][]): OverlapPointInfo[] {\n    const targetPoints1 = points1.slice();\n    const targetPoints2 = points2.slice();\n\n    if (getShapeDirection(targetPoints1) === -1) {\n        targetPoints1.reverse();\n    }\n    if (getShapeDirection(targetPoints2) === -1) {\n        targetPoints2.reverse();\n    }\n    const lines1 = convertLines(targetPoints1);\n    const lines2 = convertLines(targetPoints2);\n    const linearConstantsList1 = lines1.map(line1 => getLinearConstants(line1[0], line1[1]));\n    const linearConstantsList2 = lines2.map(line2 => getLinearConstants(line2[0], line2[1]));\n\n    const overlapInfos: OverlapPointInfo[] = [];\n\n    linearConstantsList1.forEach((linearConstants1, i) => {\n        const line1 = lines1[i];\n        const linePointInfos: OverlapPointInfo[] = [];\n        linearConstantsList2.forEach((linearConstants2, j) => {\n            const intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            const points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);\n\n            linePointInfos.push(...points.map(pos => ({\n                index1: i,\n                index2: j,\n                pos,\n                type: \"intersection\" as const,\n            })));\n        });\n        linePointInfos.sort((a, b) => {\n            return getDist(line1[0], a.pos) - getDist(line1[0], b.pos);\n        });\n\n        overlapInfos.push(...linePointInfos);\n\n        if (isInside(line1[1], targetPoints2)) {\n            overlapInfos.push({\n                index1: i,\n                index2: -1,\n                pos: line1[1],\n                type: \"inside\" as const,\n            });\n        }\n    });\n\n    lines2.forEach((line2, i) => {\n        if (!isInside(line2[1], targetPoints1)) {\n            return;\n        }\n        let isNext = false;\n        let index = findIndex(overlapInfos, ({ index2 }) => {\n            if (index2 === i) {\n                isNext = true;\n                return false;\n            }\n\n            if (isNext) {\n                return true;\n            }\n            return false;\n        });\n        if (index === -1) {\n            isNext = false;\n            index = findIndex(overlapInfos, ({ index1, index2 }) => {\n                if (index1 === -1 && index2 + 1 === i) {\n                    isNext = true;\n                    return false;\n                }\n\n                if (isNext) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        if (index === -1) {\n            overlapInfos.push({\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\" as const,\n            });\n        } else {\n            overlapInfos.splice(index, 0, {\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\" as const,\n            });\n\n        }\n    });\n    const pointMap: Record<string, boolean> = {};\n\n    return overlapInfos.filter(({ pos }) => {\n        const key = `${pos[0]}x${pos[1]}`;\n\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapPoints(points1: number[][], points2: number[][]): number[][] {\n    const infos = getOverlapPointInfos(points1, points2);\n\n    return infos.map(({ pos }) => pos);\n}\n\nfunction isConnectedLine(line: OverlapPointInfo[]) {\n    const {\n        0: {\n            index1: prevIndex1,\n            index2: prevIndex2,\n        },\n        1: {\n            index1: nextIndex1,\n            index2: nextIndex2,\n        }\n    } = line;\n\n    if (prevIndex1 !== -1) {\n        // same line\n        if (prevIndex1 === nextIndex1) {\n            return true;\n        }\n        if (prevIndex1 + 1 === nextIndex1) {\n            return true;\n        }\n    }\n    if (prevIndex2 !== -1) {\n        // same line\n        if (prevIndex2 === nextIndex2) {\n            return true;\n        }\n        if (prevIndex2 + 1 === nextIndex2) {\n            return true;\n        }\n    }\n\n    return false;\n\n}\n/**\n* Get the areas of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapAreas(points1: number[][], points2: number[][]): number[][][] {\n    const infos = getOverlapPointInfos(points1, points2);\n    const areas: OverlapPointInfo[][] = [];\n    let area: OverlapPointInfo[];\n\n    getOverlapPointInfos(points1, points2).forEach((info, i, arr) => {\n        if (i === 0 || !isConnectedLine([arr[i - 1], info])) {\n            area = [info];\n            areas.push(area);\n        } else {\n            area.push(info);\n        }\n    });\n\n    return areas.map(area => area.map(({ pos }) => pos));\n}\nfunction findReversedAreas(points1: number[][], points2: number[][], index: number = 0, areas: number[][][] = []): number[][][] {\n    const isFirst = areas.length === 0;\n    const length = points1.length;\n    const nextIndex = points1[index] ? index : 0;\n    const nextPoints1 = [...points1.slice(nextIndex), ...points1.slice(0, nextIndex)];\n\n    for (let i = 0; i < length; ++i) {\n        const point1 = nextPoints1[i];\n\n        if (find(points2, point2 => point2[0] === point1[0] && point2[1] === point1[1])) {\n            continue;\n        }\n        if (areas.some(nextArea => find(nextArea, areaPoint => areaPoint[0] === point1[0] && areaPoint[1] === point1[1]))) {\n            if (isFirst) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        let nextArea: number[][];\n\n        if (isFirst) {\n            nextArea = [];\n            areas.push(nextArea);\n        } else {\n            nextArea = areas[areas.length - 1];\n        }\n        nextArea.push(point1);\n\n\n        const line = [point1, points1[index + 1] || points1[0]];\n        const nextPoint2 = points2.filter(point2 => {\n            return isPointOnLine(point2, line);\n        }).sort((a, b) => {\n            return getDist(point1, a) - getDist(point1, b);\n        })[0];\n\n        if (!nextPoint2) {\n            findReversedAreas(nextPoints1, points2, i + 1, areas);\n            break;\n        } else {\n            const point2Index = points2.indexOf(nextPoint2);\n\n            findReversedAreas(points2, points1, point2Index, areas);\n            if (!isFirst) {\n                break;\n            }\n        }\n    }\n    return areas;\n}\nexport function findConnectedAreas(points1: number[][], points2: number[][]) {\n    return findReversedAreas(points1, [...points2].reverse());\n}\n/**\n* Get non-overlapping areas of two shapes based on points1.\n* @memberof OverlapArea\n*/\nexport function getUnoverlapAreas(points1: number[][], points2: number[][]): number[][][] {\n    if (!points2.length) {\n        return [[...points1]];\n    }\n    const overlapAreas = getOverlapAreas(points1, points2);\n     let unoverlapAreas = [points1];\n\n    overlapAreas.forEach(overlapArea => {\n        const nextOverlapArea = [...overlapArea].reverse();\n\n        unoverlapAreas = flat(unoverlapAreas.map(area => {\n            const connectedAreas = findReversedAreas(area, nextOverlapArea);\n            const firstConnectedArea = connectedAreas[0];\n\n            if (connectedAreas.length === 1 && nextOverlapArea.every(point => firstConnectedArea.indexOf(point) === -1)) {\n                const lastPoint = firstConnectedArea[firstConnectedArea.length - 1];\n                const firstPoint = [...nextOverlapArea].sort((a, b) => {\n                    return getDist(lastPoint, a) - getDist(lastPoint, b);\n                })[0];\n                const firstIndex = nextOverlapArea.indexOf(firstPoint);\n\n                firstConnectedArea.push(\n                    ...nextOverlapArea.slice(firstIndex),\n                    ...nextOverlapArea.slice(0, firstIndex),\n                    nextOverlapArea[firstIndex],\n                    lastPoint,\n                );\n            }\n            return connectedAreas;\n        }));\n    });\n\n    return unoverlapAreas;\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapSize(points1: number[][], points2: number[][]): number {\n    const points = getOverlapPoints(points1, points2);\n\n    return getAreaSize(points);\n}\n"],"names":["tinyThrottle","num","throttle","TINY_NUM","getAreaSize","points","length","Math","abs","sum","map","point","i","nextPoint","getMinMaxs","xs","ys","minX","min","minY","maxX","max","maxY","isInside","pos","excludeLine","x","y","_a","xLine","xLinearConstants","getLinearConstants","lines","convertLines","intersectionPosInfos","forEach","line","linearConstants2","linearConstants","standardPoint","every","v","push","type","getPointsOnLines","getIntersectionPointsByConstants","some","linePoint","point2","point1","find","p","intersectionCount","xMap","prevValue","nextValue","getDistanceFromPointToConstants","a","b","c","x1","y1","dx","dy","linearConstants1","a1","b1","c1","a2","b2","c2","isZeroA","isZeroB","Infinity","result","isPointOnLine","minMaxs","order","results","left","minMax","right","top","bottom","filter","pointX","pointY","__spreadArrays","slice","getOverlapPointInfos","points1","points2","targetPoints1","targetPoints2","getShapeDirection","reverse","lines1","lines2","linearConstantsList1","line1","linearConstantsList2","line2","overlapInfos","linePointInfos","j","index1","index2","sort","getDist","isNext","index","findIndex","splice","pointMap","key","getOverlapPoints","getOverlapAreas","area","areas","info","arr","prevIndex1","prevIndex2","nextIndex1","_b","nextIndex2","isConnectedLine","findReversedAreas","isFirst","nextIndex","nextPoints1","nextArea","areaPoint","nextPoint2","point2Index","indexOf","rect","width","height","ratioX","ratioY","isLimit","overlapAreas","unoverlapAreas","overlapArea","nextOverlapArea","lastPoint_1","connectedAreas","firstConnectedArea","firstPoint","firstIndex","reduce","prev","current"],"mappings":"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"}