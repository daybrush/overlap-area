{"version":3,"file":"overlap-area.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import { throttle, TINY_NUM } from \"@daybrush/utils\";\n\nexport function tinyThrottle(num: number) {\n    return throttle(num, TINY_NUM);\n}\n\nexport function isSameConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n) {\n    return linearConstants1.every((v, i) => tinyThrottle(v - linearConstants2[i]) === 0);\n}\n\nexport function isSamePoint(\n    point1: number[],\n    point2: number[],\n) {\n    return !tinyThrottle(point1[0] - point2[0]) && !tinyThrottle(point1[1] - point2[1]);\n}\n\nexport function flat<Type extends any>(arr: Type[][]): Type[] {\n    return arr.reduce<Type[]>((prev, current) => {\n        prev.push(...current);\n        return prev;\n    }, []);\n}\n","import { sum, findIndex, getShapeDirection, getDist, throttle, TINY_NUM, find } from \"@daybrush/utils\";\nimport { OverlapPointInfo, PointInfo, Rect } from \"./types\";\nimport { flat, isSameConstants, isSamePoint, tinyThrottle } from \"./utils\";\n\n/**\n * @namespace OverlapArea\n */\n\n/**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */\nexport function getAreaSize(points: number[][]): number {\n    if (points.length < 3) {\n        return 0;\n    }\n    return Math.abs(sum(points.map((point, i) => {\n        const nextPoint = points[i + 1] || points[0];\n\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n\n\n/**\n * Get points that fit the rect,\n * @memberof OverlapArea\n */\nexport function fitPoints(points: number[][], rect: Rect): number[][] {\n    const { width, height, left, top } = rect;\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const ratioX = width / (maxX - minX);\n    const ratioY = height / (maxY - minY);\n\n    return points.map(point => {\n        return [\n            left + (point[0] - minX) * ratioX,\n            top + (point[1] - minY) * ratioY,\n        ];\n    });\n}\n/**\n * Get the minimum and maximum points of the points.\n * @memberof OverlapArea\n */\nexport function getMinMaxs(points: number[][]): { minX: number, minY: number, maxX: number, maxY: number } {\n    const xs = points.map(point => point[0]);\n    const ys = points.map(point => point[1]);\n\n    return {\n        minX: Math.min(...xs),\n        minY: Math.min(...ys),\n        maxX: Math.max(...xs),\n        maxY: Math.max(...ys),\n    };\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */\nexport function isInside(pos: number[], points: number[][], excludeLine?: boolean): boolean {\n    const [x, y] = pos;\n    const {\n        minX,\n        maxX,\n    } = getMinMaxs(points);\n\n    const xLine = [[minX, y], [maxX, y]];\n    const xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    const lines = convertLines(points);\n\n    interface IntersectionPosInfo {\n        pos: number[];\n        line: number[][];\n        type: \"intersection\" | \"point\" | \"line\";\n    }\n    const intersectionPosInfos: IntersectionPosInfo[] = [];\n\n    lines.forEach(line => {\n        const linearConstants = getLinearConstants(line[0], line[1]);\n        const standardPoint = line[0];\n\n        if (isSameConstants(xLinearConstants, linearConstants)) {\n            intersectionPosInfos.push({\n                pos: pos,\n                line,\n                type: \"line\",\n            });\n        } else {\n            const xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);\n\n            xPoints.forEach(point => {\n                if (line.some(linePoint => isSamePoint(linePoint, point))) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line,\n                        type: \"point\",\n                    });\n                } else if (tinyThrottle(standardPoint[1] - y) !== 0) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line,\n                        type: \"intersection\",\n                    });\n                }\n            })\n        }\n    });\n\n    if (!excludeLine) {\n        // on line\n        if (find(intersectionPosInfos, p => p[0] === x)) {\n            return true;\n        }\n    }\n    let intersectionCount = 0;\n    const xMap = {};\n\n    intersectionPosInfos.forEach(({ pos, type, line }) => {\n        if (pos[0] > x) {\n            return;\n        }\n        if (type === \"intersection\") {\n            ++intersectionCount;\n        } else if (type === \"line\") {\n            return;\n        } else if (type === \"point\") {\n            const point = find(line, linePoint => linePoint[1] !== y);\n            const prevValue = xMap[pos[0]];\n            const nextValue = point[1] > y ? 1 : -1;\n\n            if (!prevValue) {\n                xMap[pos[0]] = nextValue;\n            } else if (prevValue !== nextValue) {\n                ++intersectionCount;\n            }\n        }\n    });\n    return intersectionCount % 2 === 1;\n}\n/**\n * Get distance from point to constants. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getDistanceFromPointToConstants(\n    [a, b, c]: [number, number, number],\n    pos: number[],\n) {\n    return (a * pos[0] + b * pos[1] + c) / (a * a + b * b);\n}\n\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getLinearConstants(point1: number[], point2: number[]): [number, number, number] {\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    // ax + by + c = 0\n    // [a, b, c]\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n\n    // b > 0\n    // ax + by + c = 0\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    if (!dx) {\n        if (dy) {\n            // -x + 1 = 0\n            a = -1;\n            c = x1;\n        }\n    } else if (!dy) {\n        // y - 1 = 0\n        b = 1;\n        c = -y1;\n    } else {\n        // y = -a(x - x1) + y1\n        // ax + y + a * x1 - y1 = 0\n        a = -dy / dx;\n        b = 1;\n        c = -a * x1 - y1;\n    }\n\n    return [a, b, c] as [number, number, number];\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */\nexport function getIntersectionPointsByConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n): number[][] {\n    const [a1, b1, c1] = linearConstants1;\n    const [a2, b2, c2] = linearConstants2;\n\n    const isZeroA = a1 === 0 && a2 === 0;\n    const isZeroB = b1 === 0 && b2 === 0;\n    let results: number[][] = [];\n\n    if (isZeroA && isZeroB) {\n        return [];\n    } else if (isZeroA) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        const y1 = -c1 / b1;\n        const y2 = -c2 / b2;\n\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [-Infinity, y1],\n                [Infinity, y1],\n            ];\n        }\n    } else if (isZeroB) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        const x1 = -c1 / a1;\n        const x2 = -c2 / a2;\n\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [x1, -Infinity],\n                [x1, Infinity],\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        const y = -c1 / b1;\n        const x = -(b2 * y + c2) / a2;\n\n        results = [[x, y]];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        const y = -c2 / b2;\n        const x = -(b1 * y + c1) / a1;\n\n        results = [[x, y]];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        const x = - c1 / a1;\n        const y = -(a2 * x + c2) / b2;\n\n        results = [[x, y]];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        const x = - c2 / a2;\n        const y = -(a1 * x + c1) / b1;\n\n        results = [[x, y]];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        const x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        const y = -(a1 * x + c1) / b1;\n\n        results = [[x, y]];\n    }\n\n    return results.map(result => [result[0], result[1]]);\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */\nexport function getIntersectionPoints(\n    line1: number[][],\n    line2: number[][],\n    isLimit?: boolean,\n): number[][] {\n    const points = getIntersectionPointsByConstants(\n        getLinearConstants(line1[0], line1[1]),\n        getLinearConstants(line2[0], line2[1]),\n    );\n\n    if (isLimit) {\n        return getPointsOnLines(points, [line1, line2]);\n    }\n    return points;\n}\n\nexport function isPointOnLine(\n    pos: number[],\n    line: number[][],\n) {\n    const linearConstants = getLinearConstants(line[0], line[1]);\n\n    return tinyThrottle(getDistanceFromPointToConstants(linearConstants, pos)) === 0;\n}\n\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */\nexport function getPointsOnLines(\n    points: number[][],\n    lines: number[][][],\n): number[][] {\n    const minMaxs = lines.map(line => [0, 1].map(order => [\n        Math.min(line[0][order], line[1][order]),\n        Math.max(line[0][order], line[1][order]),\n    ]));\n    let results: number[][] = [];\n\n    if (points.length === 2) {\n        const [x, y] = points[0];\n        if (!tinyThrottle(x - points[1][0])) {\n            /// Math.max(minY1, minY2)\n            const top = Math.max(...minMaxs.map(minMax => minMax[1][0]));\n            /// Math.min(maxY1, miax2)\n            const bottom = Math.min(...minMaxs.map(minMax => minMax[1][1]));\n\n            if (tinyThrottle(top - bottom) > 0) {\n                return [];\n            }\n            results = [\n                [x, top],\n                [x, bottom],\n            ];\n        } else if (!tinyThrottle(y - points[1][1])) {\n            /// Math.max(minY1, minY2)\n            const left = Math.max(...minMaxs.map(minMax => minMax[0][0]));\n            /// Math.min(maxY1, miax2)\n            const right = Math.min(...minMaxs.map(minMax => minMax[0][1]));\n\n            if (tinyThrottle(left - right) > 0) {\n                return [];\n            }\n            results = [\n                [left, y],\n                [right, y],\n            ];\n        }\n    }\n\n    if (!results.length) {\n        results = points.filter(point => {\n            const [pointX, pointY] = point;\n\n            return minMaxs.every(minMax => {\n                return (0 <= tinyThrottle(pointX - minMax[0][0]) && 0 <= tinyThrottle(minMax[0][1] - pointX))\n                && (0 <= tinyThrottle(pointY - minMax[1][0]) && 0 <= tinyThrottle(minMax[1][1] - pointY));\n            });\n        });\n    }\n\n    return results.map(result => [tinyThrottle(result[0]), tinyThrottle(result[1])]);\n\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/\nexport function convertLines(points: number[][]): number[][][] {\n    return [...points.slice(1), points[0]].map((point, i) => [points[i], point]);\n}\n\nfunction getOverlapPointInfos(points1: number[][], points2: number[][]): OverlapPointInfo[] {\n    const targetPoints1 = points1.slice();\n    const targetPoints2 = points2.slice();\n\n    if (getShapeDirection(targetPoints1) === -1) {\n        targetPoints1.reverse();\n    }\n    if (getShapeDirection(targetPoints2) === -1) {\n        targetPoints2.reverse();\n    }\n    const lines1 = convertLines(targetPoints1);\n    const lines2 = convertLines(targetPoints2);\n    const linearConstantsList1 = lines1.map(line1 => getLinearConstants(line1[0], line1[1]));\n    const linearConstantsList2 = lines2.map(line2 => getLinearConstants(line2[0], line2[1]));\n\n    const overlapInfos: OverlapPointInfo[] = [];\n\n    linearConstantsList1.forEach((linearConstants1, i) => {\n        const line1 = lines1[i];\n        const linePointInfos: OverlapPointInfo[] = [];\n        linearConstantsList2.forEach((linearConstants2, j) => {\n            const intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            const points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);\n\n            linePointInfos.push(...points.map(pos => ({\n                index1: i,\n                index2: j,\n                pos,\n                type: \"intersection\" as const,\n            })));\n        });\n        linePointInfos.sort((a, b) => {\n            return getDist(line1[0], a.pos) - getDist(line1[0], b.pos);\n        });\n\n        overlapInfos.push(...linePointInfos);\n\n        if (isInside(line1[1], targetPoints2)) {\n            overlapInfos.push({\n                index1: i,\n                index2: -1,\n                pos: line1[1],\n                type: \"inside\" as const,\n            });\n        }\n    });\n\n    lines2.forEach((line2, i) => {\n        if (!isInside(line2[1], targetPoints1)) {\n            return;\n        }\n        let isNext = false;\n        let index = findIndex(overlapInfos, ({ index2 }) => {\n            if (index2 === i) {\n                isNext = true;\n                return false;\n            }\n\n            if (isNext) {\n                return true;\n            }\n            return false;\n        });\n        if (index === -1) {\n            isNext = false;\n            index = findIndex(overlapInfos, ({ index1, index2 }) => {\n                if (index1 === -1 && index2 + 1 === i) {\n                    isNext = true;\n                    return false;\n                }\n\n                if (isNext) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        if (index === -1) {\n            overlapInfos.push({\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\" as const,\n            });\n        } else {\n            overlapInfos.splice(index, 0, {\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\" as const,\n            });\n\n        }\n    });\n    const pointMap: Record<string, boolean> = {};\n\n    return overlapInfos.filter(({ pos }) => {\n        const key = `${pos[0]}x${pos[1]}`;\n\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapPoints(points1: number[][], points2: number[][]): number[][] {\n    const infos = getOverlapPointInfos(points1, points2);\n\n    return infos.map(({ pos }) => pos);\n}\n\nfunction isConnectedLine(line: OverlapPointInfo[]) {\n    const {\n        0: {\n            index1: prevIndex1,\n            index2: prevIndex2,\n        },\n        1: {\n            index1: nextIndex1,\n            index2: nextIndex2,\n        }\n    } = line;\n\n    if (prevIndex1 !== -1) {\n        // same line\n        if (prevIndex1 === nextIndex1) {\n            return true;\n        }\n        if (prevIndex1 + 1 === nextIndex1) {\n            return true;\n        }\n    }\n    if (prevIndex2 !== -1) {\n        // same line\n        if (prevIndex2 === nextIndex2) {\n            return true;\n        }\n        if (prevIndex2 + 1 === nextIndex2) {\n            return true;\n        }\n    }\n\n    return false;\n\n}\n/**\n* Get the areas of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapAreas(points1: number[][], points2: number[][]): number[][][] {\n    const infos = getOverlapPointInfos(points1, points2);\n    const areas: OverlapPointInfo[][] = [];\n    let area: OverlapPointInfo[];\n\n    getOverlapPointInfos(points1, points2).forEach((info, i, arr) => {\n        if (i === 0 || !isConnectedLine([arr[i - 1], info])) {\n            area = [info];\n            areas.push(area);\n        } else {\n            area.push(info);\n        }\n    });\n\n    return areas.map(area => area.map(({ pos }) => pos));\n}\nfunction findReversedAreas(points1: number[][], points2: number[][], index: number = 0, areas: number[][][] = []): number[][][] {\n    const isFirst = areas.length === 0;\n    const length = points1.length;\n    const nextIndex = points1[index] ? index : 0;\n    const nextPoints1 = [...points1.slice(nextIndex), ...points1.slice(0, nextIndex)];\n\n    for (let i = 0; i < length; ++i) {\n        const point1 = nextPoints1[i];\n\n        if (find(points2, point2 => point2[0] === point1[0] && point2[1] === point1[1])) {\n            continue;\n        }\n        if (areas.some(nextArea => find(nextArea, areaPoint => areaPoint[0] === point1[0] && areaPoint[1] === point1[1]))) {\n            if (isFirst) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        let nextArea: number[][];\n\n        if (isFirst) {\n            nextArea = [];\n            areas.push(nextArea);\n        } else {\n            nextArea = areas[areas.length - 1];\n        }\n        nextArea.push(point1);\n\n\n        const line = [point1, points1[index + 1] || points1[0]];\n        const nextPoint2 = points2.filter(point2 => {\n            return isPointOnLine(point2, line);\n        }).sort((a, b) => {\n            return getDist(point1, a) - getDist(point1, b);\n        })[0];\n\n        if (!nextPoint2) {\n            findReversedAreas(nextPoints1, points2, i + 1, areas);\n            break;\n        } else {\n            const point2Index = points2.indexOf(nextPoint2);\n\n            findReversedAreas(points2, points1, point2Index, areas);\n            if (!isFirst) {\n                break;\n            }\n        }\n    }\n    return areas;\n}\nexport function findConnectedAreas(points1: number[][], points2: number[][]) {\n    return findReversedAreas(points1, [...points2].reverse());\n}\n/**\n* Get non-overlapping areas of two shapes based on points1.\n* @memberof OverlapArea\n*/\nexport function getUnoverlapAreas(points1: number[][], points2: number[][]): number[][][] {\n    if (!points2.length) {\n        return [[...points1]];\n    }\n    const overlapAreas = getOverlapAreas(points1, points2);\n     let unoverlapAreas = [points1];\n\n    overlapAreas.forEach(overlapArea => {\n        const nextOverlapArea = [...overlapArea].reverse();\n\n        unoverlapAreas = flat(unoverlapAreas.map(area => {\n            const connectedAreas = findReversedAreas(area, nextOverlapArea);\n            const firstConnectedArea = connectedAreas[0];\n\n            if (connectedAreas.length === 1 && nextOverlapArea.every(point => firstConnectedArea.indexOf(point) === -1)) {\n                const lastPoint = firstConnectedArea[firstConnectedArea.length - 1];\n                const firstPoint = [...nextOverlapArea].sort((a, b) => {\n                    return getDist(lastPoint, a) - getDist(lastPoint, b);\n                })[0];\n                const firstIndex = nextOverlapArea.indexOf(firstPoint);\n\n                firstConnectedArea.push(\n                    ...nextOverlapArea.slice(firstIndex),\n                    ...nextOverlapArea.slice(0, firstIndex),\n                    nextOverlapArea[firstIndex],\n                    lastPoint,\n                );\n            }\n            return connectedAreas;\n        }));\n    });\n\n    return unoverlapAreas;\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapSize(points1: number[][], points2: number[][]): number {\n    const points = getOverlapPoints(points1, points2);\n\n    return getAreaSize(points);\n}\n"],"names":["tinyThrottle","num","throttle","TINY_NUM","isSameConstants","linearConstants1","linearConstants2","every","v","i","isSamePoint","point1","point2","flat","arr","reduce","prev","current","push","getAreaSize","points","length","Math","abs","sum","map","point","nextPoint","fitPoints","rect","width","height","left","top","_a","getMinMaxs","minX","minY","maxX","maxY","ratioX","ratioY","xs","ys","min","max","isInside","pos","excludeLine","x","y","xLine","xLinearConstants","getLinearConstants","lines","convertLines","intersectionPosInfos","forEach","line","linearConstants","standardPoint","type","xPoints","getPointsOnLines","getIntersectionPointsByConstants","some","linePoint","find","p","intersectionCount","xMap","prevValue","nextValue","getDistanceFromPointToConstants","a","b","c","x1","y1","x2","y2","dx","dy","a1","b1","c1","a2","b2","c2","isZeroA","isZeroB","results","Infinity","result","getIntersectionPoints","line1","line2","isLimit","isPointOnLine","minMaxs","order","minMax","bottom","right","filter","pointX","pointY","__spreadArray","slice","getOverlapPointInfos","points1","points2","targetPoints1","targetPoints2","getShapeDirection","reverse","lines1","lines2","linearConstantsList1","linearConstantsList2","overlapInfos","linePointInfos","j","intersectionPoints","index1","index2","sort","getDist","isNext","index","findIndex","splice","pointMap","key","getOverlapPoints","infos","isConnectedLine","prevIndex1","prevIndex2","_b","nextIndex1","nextIndex2","getOverlapAreas","areas","area","info","findReversedAreas","isFirst","nextIndex","nextPoints1","nextArea","areaPoint","nextPoint2","point2Index","indexOf","findConnectedAreas","getUnoverlapAreas","overlapAreas","unoverlapAreas","overlapArea","nextOverlapArea","connectedAreas","firstConnectedArea","lastPoint_1","firstPoint","firstIndex","getOverlapSize"],"mappings":"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"}