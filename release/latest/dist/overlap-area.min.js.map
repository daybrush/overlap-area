{"version":3,"file":"overlap-area.min.js","sources":["../src/index.ts"],"sourcesContent":["import { sum, findIndex, getShapeDirection, getDist } from \"@daybrush/utils\";\n\n/**\n * @namespace OverlapArea\n */\n\n/**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */\nexport function getAreaSize(points: number[][]) {\n    return Math.abs(sum(points.map((point, i) => {\n        const nextPoint = points[i + 1] || points[0];\n\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */\nexport function isInside(pos: number[], points: number[][], excludeLine?: boolean) {\n    const [x, y] = pos;\n    const xs = points.map(point => point[0]);\n    const ys = points.map(point => point[1]);\n    const minX = Math.min(...xs);\n    const maxX = Math.max(...xs);\n    const minY = Math.min(...ys);\n    const maxY = Math.max(...ys);\n\n    const xLine = [[minX, y], [maxX, y]];\n    const yLine = [[x, minY], [x, maxY]];\n    const xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    const yLinearConstants = getLinearConstants(yLine[0], yLine[1]);\n    const lines = convertLines(points);\n    const intersectionXPoints: number[][] = [];\n    const intersectionYPoints: number[][] = [];\n\n    lines.forEach(line => {\n        const linearConstants = getLinearConstants(line[0], line[1]);\n        const xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);\n        const yPoints = getPointsOnLines(getIntersectionPointsByConstants(yLinearConstants, linearConstants), [yLine, line]);\n\n        intersectionXPoints.push(...xPoints);\n        intersectionYPoints.push(...yPoints);\n\n        if (!linearConstants[0]) {\n            intersectionXPoints.push(...xPoints);\n        }\n        if (!linearConstants[1]) {\n            intersectionYPoints.push(...yPoints);\n        }\n    });\n\n    if (!excludeLine) {\n        if (\n            findIndex(intersectionXPoints, p => p[0] === x) > -1\n            || findIndex(intersectionYPoints, p => p[1] === y) > -1\n        ) {\n            return true;\n        }\n    }\n    if (\n        (intersectionXPoints.filter(p => p[0] > x).length % 2)\n        && (intersectionYPoints.filter(p => p[1] > y).length % 2)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getLinearConstants(point1: number[], point2: number[]) {\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    // ax + by + c = 0\n    // [a, b, c]\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\n    if (x1 === x2 && y1 === y2) {\n        return [0, 0, 0];\n    } if (x1 === x2) {\n        // x = x1\n        return [1, 0, -x1];\n    } else if (y1 === y2) {\n        // y = y1\n        return [0, 1, -y1];\n    } else {\n        // x1 + a * y1 + b = 0\n        // x2 + a * y2 + b = 0\n        // (x1 -x2) + (y1 - y2) * a = 0\n        // a = (x2 - x1) / (y1 - y2)\n        // x1 + (x2 - x1) / (y1 - y2)\n\n        const a = (x2 - x1) / (y1 - y2);\n        const b = -x1 - a * y1;\n        return [1, a, b];\n    }\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */\nexport function getIntersectionPointsByConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n) {\n    const [a1, b1, c1] = linearConstants1;\n    const [a2, b2, c2] = linearConstants2;\n\n    if (a1 === 0 && a2 === 0) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        const y1 = -c1 / b1;\n        const y2 = -c2 / b2;\n\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [-Infinity, y1],\n                [Infinity, y1],\n            ];\n        }\n    } else if (b1 === 0 && b2 === 0) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        const x1 = -c1 / a1;\n        const x2 = -c2 / a2;\n\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [x1, -Infinity],\n                [x1, Infinity],\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        const y = -c1 / b1;\n        const x = -(b2 * y + c2) / a2;\n\n        return [[x, y]];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        const y = -c2 / b2;\n        const x = -(b1 * y + c1) / a1;\n\n        return [[x, y]];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        const x = - c1 / a1;\n        const y = -(a2 * x + c2) / b2;\n\n        return [[x, y]];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        const x = - c2 / a2;\n        const y = -(a1 * x + c1) / b1;\n\n        return [[x, y]];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        const x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        const y = -(a1 * x + c1) / b1;\n\n        return [[x, y]];\n    }\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */\nexport function getIntersectionPoints(\n    line1: number[][],\n    line2: number[][],\n    isLimit?: boolean,\n) {\n    const points = getIntersectionPointsByConstants(\n        getLinearConstants(line1[0], line1[1]),\n        getLinearConstants(line2[0], line2[1]),\n    );\n\n    if (isLimit) {\n        return getPointsOnLines(points, [line1, line2]);\n    }\n    return points;\n}\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */\nexport function getPointsOnLines(\n    points: number[][],\n    lines: number[][][],\n) {\n    const minMaxs = lines.map(line => [0, 1].map(order => [\n        Math.min(line[0][order], line[1][order]),\n        Math.max(line[0][order], line[1][order]),\n    ]));\n    if (points.length === 2) {\n        const [x, y] = points[0];\n        if (x === points[1][0]) {\n            /// Math.max(minY1, minY2)\n            const top = Math.max(...minMaxs.map(minMax => minMax[1][0]));\n            /// Math.min(maxY1, miax2)\n            const bottom = Math.min(...minMaxs.map(minMax => minMax[1][1]));\n\n            if (top > bottom) {\n                return [];\n            }\n            return [\n                [x, top],\n                [x, bottom],\n            ];\n        } else if (y === points[1][1]) {\n            /// Math.max(minY1, minY2)\n            const left = Math.max(...minMaxs.map(minMax => minMax[0][0]));\n            /// Math.min(maxY1, miax2)\n            const right = Math.min(...minMaxs.map(minMax => minMax[0][1]));\n\n            if (left > right) {\n                return [];\n            }\n            return [\n                [left, y],\n                [right, y],\n            ];\n        }\n    }\n\n    return points.filter(point => {\n        return minMaxs.every(minMax => {\n            return (minMax[0][0] <= point[0] && point[0] <= minMax[0][1])\n                && (minMax[1][0] <= point[1] && point[1] <= minMax[1][1]);\n        });\n    });\n\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/\nexport function convertLines(points: number[][]) {\n    return [...points.slice(1), points[0]].map((point, i) => [points[i], point]);\n}\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapPoints(points1: number[][], points2: number[][]) {\n    const lines1 = convertLines(points1);\n    const lines2 = convertLines(points2);\n    const linearConstantss1 = lines1.map(line1 => getLinearConstants(line1[0], line1[1]));\n    const linearConstantss2 = lines2.map(line2 => getLinearConstants(line2[0], line2[1]));\n\n    const overlappingPoints: number[][] = [];\n    const points2Direction = getShapeDirection(points2);\n\n    lines2.forEach(line2 => {\n        if (isInside(line2[1], points1)) {\n            overlappingPoints[points2Direction > 0 ? \"push\" : \"unshift\"](line2[1]);\n        }\n    });\n    linearConstantss1.forEach((linearConstants1, i) => {\n        const line1 = lines1[i];\n        const linePoints: number[][] = [];\n\n        linearConstantss2.forEach((linearConstants2, j) => {\n            const intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            const points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);\n\n            linePoints.push(...points);\n        });\n        linePoints.sort((a, b) => {\n            return getDist(line1[0], a) - getDist(line1[0], b);\n        });\n        overlappingPoints.push(...linePoints);\n        if (isInside(line1[1], points2)) {\n            overlappingPoints.push(line1[1]);\n        }\n    });\n    const pointMap: Record<string, boolean> = {};\n\n    return overlappingPoints.filter(point => {\n        const key = `${point[0]}x${point[1]}`;\n\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapSize(points1: number[][], points2: number[][]) {\n    const points = getOverlapPoints(points1, points2);\n\n    return getAreaSize(points);\n}\n"],"names":["getAreaSize","points","Math","abs","sum","map","point","i","nextPoint","isInside","pos","excludeLine","x","y","xs","ys","minX","min","maxX","max","minY","maxY","xLine","yLine","xLinearConstants","getLinearConstants","yLinearConstants","lines","convertLines","intersectionXPoints","intersectionYPoints","forEach","line","linearConstants","xPoints","getPointsOnLines","getIntersectionPointsByConstants","yPoints","push","findIndex","p","filter","length","point1","point2","x1","y1","x2","y2","a_1","linearConstants1","linearConstants2","a1","b1","c1","a2","b2","c2","Infinity","minMaxs","order","_a","top","minMax","bottom","left","right","every","__spreadArrays","slice","getOverlapPoints","points1","points2","lines1","lines2","linearConstantss1","line1","linearConstantss2","line2","overlappingPoints","points2Direction","linePoints","j","sort","a","b","getDist","pointMap","key","isLimit"],"mappings":"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"}