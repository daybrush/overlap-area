/*
Copyright (c) 2020 Daybrush
name: overlap-area
license: MIT
author: Daybrush
repository: git+https://github.com/daybrush/overlap-area.git
version: 1.1.0
*/
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(n=n||self).OverlapArea=t()}(this,function(){"use strict";function p(n,t,r){if(r||2===arguments.length)for(var e,i=0,u=t.length;i<u;i++)!e&&i in t||((e=e||Array.prototype.slice.call(t,0,i))[i]=t[i]);return n.concat(e||Array.prototype.slice.call(t))}var a=1e-7;function u(n,t,r){void 0===r&&(r=-1);for(var e=n.length,i=0;i<e;++i)if(t(n[i],i,n))return i;return r}function h(n,t,r){t=u(n,t);return-1<t?n[t]:r}function e(n,t){var r=t[0]-n[0],t=t[1]-n[1],n=Math.atan2(t,r);return 0<=n?n:n+2*Math.PI}function i(u){return[0,1].map(function(t){for(var n=u.map(function(n){return n[t]}),r=n.length,e=0,i=r-1;0<=i;--i)e+=n[i];return r?e/r:0})}function s(n){var t=i(n),r=e(t,n[0]),t=e(t,n[1]);return r<t&&t-r<Math.PI||t<r&&t-r<-Math.PI?1:-1}function l(n,t){return Math.sqrt(Math.pow((t?t[0]:0)-n[0],2)+Math.pow((t?t[1]:0)-n[1],2))}function v(n){return n=n,(t=a)?(r=1/t,Math.round(n/t)/r):n;var t,r}function r(r){return r.length<3?0:Math.abs(function(n){for(var t=0,r=n.length-1;0<=r;--r)t+=n[r];return t}(r.map(function(n,t){t=r[t+1]||r[0];return n[0]*t[1]-t[0]*n[1]})))/2}function m(n){var t=n.map(function(n){return n[0]}),n=n.map(function(n){return n[1]});return{minX:Math.min.apply(Math,t),minY:Math.min.apply(Math,n),maxX:Math.max.apply(Math,t),maxY:Math.max.apply(Math,n)}}function d(i,n,t){var e,u,o=i[0],a=i[1],r=m(n),f=r.minX,r=r.maxX,c=[[f,a],[r,a]],p=x(c[0],c[1]),f=P(n),s=[];return f.forEach(function(n){var r,t=x(n[0],n[1]),e=n[0];r=t,p.every(function(n,t){return 0===v(n-r[t])})?s.push({pos:i,line:n,type:"line"}):g(y(p,t),[c,n]).forEach(function(r){n.some(function(n){return t=r,!v((n=n)[0]-t[0])&&!v(n[1]-t[1]);var t})?s.push({pos:r,line:n,type:"point"}):0!==v(e[1]-a)&&s.push({pos:r,line:n,type:"intersection"})})}),!(t||!h(s,function(n){return n[0]===o}))||(e=0,u={},s.forEach(function(n){var t=n.pos,r=n.type,n=n.line;t[0]>o||("intersection"===r?++e:"line"!==r&&"point"===r&&(r=h(n,function(n){return n[1]!==a}),n=u[t[0]],r=r[1]>a?1:-1,n?n!==r&&++e:u[t[0]]=r))}),e%2==1)}function o(n,t){var r=n[0],e=n[1],n=n[2];return(r*t[0]+e*t[1]+n)/(r*r+e*e)}function x(n,t){var r=n[0],n=n[1],e=t[0]-r,t=t[1]-n,i=(Math.abs(e)<a&&(e=0),Math.abs(t)<a&&(t=0),0),u=0,o=0;return e?o=t?(u=1,-(i=-t/e)*r-n):(u=1,-n):t&&(i=-1,o=r),[i,u,o]}function y(n,t){var r,e,i=n[0],u=n[1],n=n[2],o=t[0],a=t[1],t=t[2],f=0===i&&0===o,c=0===u&&0===a;return f&&c?[]:f?(f=-n/u)!=-t/a?[]:[[-1/0,f],[1/0,f]]:c?(f=-n/i)!=-t/o?[]:[[f,-1/0],[f,1/0]]:(0===i?[[r=-(a*(e=-n/u)+t)/o,e]]:0===o?[[r=-(u*(e=-t/a)+n)/i,e]]:0===u?[[r=-n/i,e=-(o*r+t)/a]]:0===a?[[r=-t/o,e=-(i*r+n)/u]]:[[r=(u*t-a*n)/(a*i-u*o),e=-(i*r+n)/u]]).map(function(n){return[n[0],n[1]]})}function M(n,t){return 0===v(o(x(t[0],t[1]),n))}function g(n,t){var e=t.map(function(t){return[0,1].map(function(n){return[Math.min(t[0][n],t[1][n]),Math.max(t[0][n],t[1][n])]})}),t=[];if(2===n.length){var r=n[0],i=r[0],r=r[1];if(v(i-n[1][0])){if(!v(r-n[1][1])){var u=Math.max.apply(Math,e.map(function(n){return n[0][0]})),o=Math.min.apply(Math,e.map(function(n){return n[0][1]}));if(0<v(u-o))return[];t=[[u,r],[o,r]]}}else{u=Math.max.apply(Math,e.map(function(n){return n[1][0]})),o=Math.min.apply(Math,e.map(function(n){return n[1][1]}));if(0<v(u-o))return[];t=[[i,u],[i,o]]}}return(t=t.length?t:n.filter(function(n){var t=n[0],r=n[1];return e.every(function(n){return 0<=v(t-n[0][0])&&0<=v(n[0][1]-t)&&0<=v(r-n[1][0])&&0<=v(n[1][1]-r)})})).map(function(n){return[v(n[0]),v(n[1])]})}function P(r){return p(p([],r.slice(1),!0),[r[0]],!1).map(function(n,t){return[r[t],n]})}function f(n,t){var i=n.slice(),o=t.slice(),a=(-1===s(i)&&i.reverse(),-1===s(o)&&o.reverse(),P(i)),f=P(o),n=a.map(function(n){return x(n[0],n[1])}),c=f.map(function(n){return x(n[0],n[1])}),p=[],r=(n.forEach(function(r,e){var i=a[e],u=[];c.forEach(function(n,t){n=g(y(r,n),[i,f[t]]);u.push.apply(u,n.map(function(n){return{index1:e,index2:t,pos:n,type:"intersection"}}))}),u.sort(function(n,t){return l(i[0],n.pos)-l(i[0],t.pos)}),p.push.apply(p,u),d(i[1],o)&&p.push({index1:e,index2:-1,pos:i[1],type:"inside"})}),f.forEach(function(n,r){var e,t;d(n[1],i)&&(e=!1,-1===(t=u(p,function(n){if(n.index2!==r)return!!e;e=!0}))&&(e=!1,t=u(p,function(n){var t=n.index1,n=n.index2;if(-1!==t||n+1!==r)return!!e;e=!0})),-1===t?p.push({index1:-1,index2:r,pos:n[1],type:"inside"}):p.splice(t,0,{index1:-1,index2:r,pos:n[1],type:"inside"}))}),{});return p.filter(function(n){n=n.pos,n="".concat(n[0],"x").concat(n[1]);return!r[n]&&(r[n]=!0)})}function c(n,t){return f(n,t).map(function(n){return n.pos})}function O(n,t){f(n,t);var e,i=[];return f(n,t).forEach(function(n,t,r){0!==t&&function(n){var t=(r=n[0]).index1,r=r.index2,e=(n=n[1]).index1,n=n.index2;if(-1!==t){if(t===e)return 1;if(t+1===e)return 1}if(-1!==r){if(r===n)return 1;if(r+1===n)return 1}}([r[t-1],n])?e.push(n):(e=[n],i.push(e))}),i.map(function(n){return n.map(function(n){return n.pos})})}function b(i,u,o,a){void 0===o&&(o=0);for(var f=0===(a=void 0===a?[]:a).length,n=i.length,t=i[o]?o:0,c=p(p([],i.slice(t),!0),i.slice(0,t),!0),r=0;r<n&&"break"!==function(n){var t,r,e=c[n];return h(u,function(n){return n[0]===e[0]&&n[1]===e[1]})?"continue":a.some(function(n){return h(n,function(n){return n[0]===e[0]&&n[1]===e[1]})})?f?"continue":"break":(r=void 0,f?a.push(r=[]):r=a[a.length-1],r.push(e),t=[e,i[o+1]||i[0]],(r=u.filter(function(n){return M(n,t)}).sort(function(n,t){return l(e,n)-l(e,t)})[0])?(r=u.indexOf(r),b(u,i,r,a),f?void 0:"break"):(b(c,u,n+1,a),"break"))}(r);++r);return a}return{__proto__:null,getAreaSize:r,fitPoints:function(n,t){var r=t.width,e=t.height,i=t.left,u=t.top,o=(t=m(n)).minX,a=t.minY,f=t.maxX,t=t.maxY,c=r/(f-o),p=e/(t-a);return n.map(function(n){return[i+(n[0]-o)*c,u+(n[1]-a)*p]})},getMinMaxs:m,isInside:d,getDistanceFromPointToConstants:o,getLinearConstants:x,getIntersectionPointsByConstants:y,getIntersectionPoints:function(n,t,r){var e=y(x(n[0],n[1]),x(t[0],t[1]));return r?g(e,[n,t]):e},isPointOnLine:M,getPointsOnLines:g,convertLines:P,getOverlapPoints:c,getOverlapAreas:O,findConnectedAreas:function(n,t){return b(n,p([],t,!0).reverse())},getUnoverlapAreas:function(n,t){var r;return t.length?(t=O(n,t),r=[n],t.forEach(function(n){var i=p([],n,!0).reverse();r=r.map(function(n){var r,t,n=b(n,i),e=n[0];return 1===n.length&&i.every(function(n){return-1===e.indexOf(n)})&&(r=e[e.length-1],t=p([],i,!0).sort(function(n,t){return l(r,n)-l(r,t)})[0],t=i.indexOf(t),e.push.apply(e,p(p(p([],i.slice(t),!1),i.slice(0,t),!1),[i[t],r],!1))),n}).reduce(function(n,t){return n.push.apply(n,t),n},[])}),r):[p([],n,!0)]},getOverlapSize:function(n,t){return r(c(n,t))}}});
//# sourceMappingURL=overlap-area.min.js.map
