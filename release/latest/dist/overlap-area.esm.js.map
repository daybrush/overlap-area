{"version":3,"file":"overlap-area.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { sum, findIndex, getShapeDirection, getDist } from \"@daybrush/utils\";\n\n/**\n * @namespace OverlapArea\n */\n\n/**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */\nexport function getAreaSize(points: number[][]) {\n    return Math.abs(sum(points.map((point, i) => {\n        const nextPoint = points[i + 1] || points[0];\n\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */\nexport function isInside(pos: number[], points: number[][], excludeLine?: boolean) {\n    const [x, y] = pos;\n    const xs = points.map(point => point[0]);\n    const ys = points.map(point => point[1]);\n    const minX = Math.min(...xs);\n    const maxX = Math.max(...xs);\n    const minY = Math.min(...ys);\n    const maxY = Math.max(...ys);\n\n    const xLine = [[minX, y], [maxX, y]];\n    const yLine = [[x, minY], [x, maxY]];\n    const xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    const yLinearConstants = getLinearConstants(yLine[0], yLine[1]);\n    const lines = convertLines(points);\n    const intersectionXPoints: number[][] = [];\n    const intersectionYPoints: number[][] = [];\n\n    lines.forEach(line => {\n        const linearConstants = getLinearConstants(line[0], line[1]);\n        const xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);\n        const yPoints = getPointsOnLines(getIntersectionPointsByConstants(yLinearConstants, linearConstants), [yLine, line]);\n\n        intersectionXPoints.push(...xPoints);\n        intersectionYPoints.push(...yPoints);\n\n        if (!linearConstants[0]) {\n            intersectionXPoints.push(...xPoints);\n        }\n        if (!linearConstants[1]) {\n            intersectionYPoints.push(...yPoints);\n        }\n    });\n\n    if (!excludeLine) {\n        if (\n            findIndex(intersectionXPoints, p => p[0] === x) > -1\n            || findIndex(intersectionYPoints, p => p[1] === y) > -1\n        ) {\n            return true;\n        }\n    }\n    if (\n        (intersectionXPoints.filter(p => p[0] > x).length % 2)\n        && (intersectionYPoints.filter(p => p[1] > y).length % 2)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getLinearConstants(point1: number[], point2: number[]) {\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    // ax + by + c = 0\n    // [a, b, c]\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\n    if (x1 === x2 && y1 === y2) {\n        return [0, 0, 0];\n    } if (x1 === x2) {\n        // x = x1\n        return [1, 0, -x1];\n    } else if (y1 === y2) {\n        // y = y1\n        return [0, 1, -y1];\n    } else {\n        // x1 + a * y1 + b = 0\n        // x2 + a * y2 + b = 0\n        // (x1 -x2) + (y1 - y2) * a = 0\n        // a = (x2 - x1) / (y1 - y2)\n        // x1 + (x2 - x1) / (y1 - y2)\n\n        const a = (x2 - x1) / (y1 - y2);\n        const b = -x1 - a * y1;\n        return [1, a, b];\n    }\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */\nexport function getIntersectionPointsByConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n) {\n    const [a1, b1, c1] = linearConstants1;\n    const [a2, b2, c2] = linearConstants2;\n\n    if (a1 === 0 && a2 === 0) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        const y1 = -c1 / b1;\n        const y2 = -c2 / b2;\n\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [-Infinity, y1],\n                [Infinity, y1],\n            ];\n        }\n    } else if (b1 === 0 && b2 === 0) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        const x1 = -c1 / a1;\n        const x2 = -c2 / a2;\n\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [x1, -Infinity],\n                [x1, Infinity],\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        const y = -c1 / b1;\n        const x = -(b2 * y + c2) / a2;\n\n        return [[x, y]];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        const y = -c2 / b2;\n        const x = -(b1 * y + c1) / a1;\n\n        return [[x, y]];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        const x = - c1 / a1;\n        const y = -(a2 * x + c2) / b2;\n\n        return [[x, y]];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        const x = - c2 / a2;\n        const y = -(a1 * x + c1) / b1;\n\n        return [[x, y]];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        const x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        const y = -(a1 * x + c1) / b1;\n\n        return [[x, y]];\n    }\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */\nexport function getIntersectionPoints(\n    line1: number[][],\n    line2: number[][],\n    isLimit?: boolean,\n) {\n    const points = getIntersectionPointsByConstants(\n        getLinearConstants(line1[0], line1[1]),\n        getLinearConstants(line2[0], line2[1]),\n    );\n\n    if (isLimit) {\n        return getPointsOnLines(points, [line1, line2]);\n    }\n    return points;\n}\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */\nexport function getPointsOnLines(\n    points: number[][],\n    lines: number[][][],\n) {\n    const minMaxs = lines.map(line => [0, 1].map(order => [\n        Math.min(line[0][order], line[1][order]),\n        Math.max(line[0][order], line[1][order]),\n    ]));\n    if (points.length === 2) {\n        const [x, y] = points[0];\n        if (x === points[1][0]) {\n            /// Math.max(minY1, minY2)\n            const top = Math.max(...minMaxs.map(minMax => minMax[1][0]));\n            /// Math.min(maxY1, miax2)\n            const bottom = Math.min(...minMaxs.map(minMax => minMax[1][1]));\n\n            if (top > bottom) {\n                return [];\n            }\n            return [\n                [x, top],\n                [x, bottom],\n            ];\n        } else if (y === points[1][1]) {\n            /// Math.max(minY1, minY2)\n            const left = Math.max(...minMaxs.map(minMax => minMax[0][0]));\n            /// Math.min(maxY1, miax2)\n            const right = Math.min(...minMaxs.map(minMax => minMax[0][1]));\n\n            if (left > right) {\n                return [];\n            }\n            return [\n                [left, y],\n                [right, y],\n            ];\n        }\n    }\n\n    return points.filter(point => {\n        return minMaxs.every(minMax => {\n            return (minMax[0][0] <= point[0] && point[0] <= minMax[0][1])\n                && (minMax[1][0] <= point[1] && point[1] <= minMax[1][1]);\n        });\n    });\n\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/\nexport function convertLines(points: number[][]) {\n    return [...points.slice(1), points[0]].map((point, i) => [points[i], point]);\n}\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapPoints(points1: number[][], points2: number[][]) {\n    const lines1 = convertLines(points1);\n    const lines2 = convertLines(points2);\n    const linearConstantss1 = lines1.map(line1 => getLinearConstants(line1[0], line1[1]));\n    const linearConstantss2 = lines2.map(line2 => getLinearConstants(line2[0], line2[1]));\n\n    const overlappingPoints: number[][] = [];\n    const points2Direction = getShapeDirection(points2);\n\n    lines2.forEach(line2 => {\n        if (isInside(line2[1], points1)) {\n            overlappingPoints[points2Direction > 0 ? \"push\" : \"unshift\"](line2[1]);\n        }\n    });\n    linearConstantss1.forEach((linearConstants1, i) => {\n        const line1 = lines1[i];\n        const linePoints: number[][] = [];\n\n        linearConstantss2.forEach((linearConstants2, j) => {\n            const intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            const points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);\n\n            linePoints.push(...points);\n        });\n        linePoints.sort((a, b) => {\n            return getDist(line1[0], a) - getDist(line1[0], b);\n        });\n        overlappingPoints.push(...linePoints);\n        if (isInside(line1[1], points2)) {\n            overlappingPoints.push(line1[1]);\n        }\n    });\n    const pointMap: Record<string, boolean> = {};\n\n    return overlappingPoints.filter(point => {\n        const key = `${point[0]}x${point[1]}`;\n\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapSize(points1: number[][], points2: number[][]) {\n    const points = getOverlapPoints(points1, points2);\n\n    return getAreaSize(points);\n}\n"],"names":["getAreaSize","points","Math","abs","sum","map","point","i","nextPoint","isInside","pos","excludeLine","x","y","xs","ys","minX","min","maxX","max","minY","maxY","xLine","yLine","xLinearConstants","getLinearConstants","yLinearConstants","lines","convertLines","intersectionXPoints","intersectionYPoints","forEach","line","linearConstants","xPoints","getPointsOnLines","getIntersectionPointsByConstants","yPoints","push","findIndex","p","filter","length","point1","point2","x1","y1","x2","y2","a_1","b_1","linearConstants1","linearConstants2","a1","b1","c1","a2","b2","c2","Infinity","getIntersectionPoints","line1","line2","isLimit","minMaxs","order","_a","top","minMax","bottom","left","right","every","__spreadArrays","slice","getOverlapPoints","points1","points2","lines1","lines2","linearConstantss1","linearConstantss2","overlappingPoints","points2Direction","getShapeDirection","linePoints","j","intersectionPoints","sort","a","b","getDist","pointMap","key","getOverlapSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAIA;;;;;SAIgBA,YAAYC;AACxB,SAAOC,IAAI,CAACC,GAAL,CAASC,GAAG,CAACH,MAAM,CAACI,GAAP,CAAW,UAACC,KAAD,EAAQC,CAAR;AAC3B,QAAMC,SAAS,GAAGP,MAAM,CAACM,CAAC,GAAG,CAAL,CAAN,IAAiBN,MAAM,CAAC,CAAD,CAAzC;AAEA,WAAOK,KAAK,CAAC,CAAD,CAAL,GAAWE,SAAS,CAAC,CAAD,CAApB,GAA0BA,SAAS,CAAC,CAAD,CAAT,GAAeF,KAAK,CAAC,CAAD,CAArD;AACH,GAJmB,CAAD,CAAZ,IAIA,CAJP;AAKH;AACD;;;;;;;;SAOgBG,SAASC,KAAeT,QAAoBU;AACjD,MAAAC,CAAC,GAAOF,GAAG,EAAA,CAAX;AAAA,MAAGG,CAAC,GAAIH,GAAG,EAAA,CAAX;AACP,MAAMI,EAAE,GAAGb,MAAM,CAACI,GAAP,CAAW,UAAAC,KAAA;AAAS,WAAAA,KAAK,CAAC,CAAD,CAAL;AAAQ,GAA5B,CAAX;AACA,MAAMS,EAAE,GAAGd,MAAM,CAACI,GAAP,CAAW,UAAAC,KAAA;AAAS,WAAAA,KAAK,CAAC,CAAD,CAAL;AAAQ,GAA5B,CAAX;AACA,MAAMU,IAAI,GAAGd,IAAI,CAACe,GAAL,MAAA,CAAAf,IAAA,EAAYY,EAAZ,CAAb;AACA,MAAMI,IAAI,GAAGhB,IAAI,CAACiB,GAAL,MAAA,CAAAjB,IAAA,EAAYY,EAAZ,CAAb;AACA,MAAMM,IAAI,GAAGlB,IAAI,CAACe,GAAL,MAAA,CAAAf,IAAA,EAAYa,EAAZ,CAAb;AACA,MAAMM,IAAI,GAAGnB,IAAI,CAACiB,GAAL,MAAA,CAAAjB,IAAA,EAAYa,EAAZ,CAAb;AAEA,MAAMO,KAAK,GAAG,CAAC,CAACN,IAAD,EAAOH,CAAP,CAAD,EAAY,CAACK,IAAD,EAAOL,CAAP,CAAZ,CAAd;AACA,MAAMU,KAAK,GAAG,CAAC,CAACX,CAAD,EAAIQ,IAAJ,CAAD,EAAY,CAACR,CAAD,EAAIS,IAAJ,CAAZ,CAAd;AACA,MAAMG,gBAAgB,GAAGC,kBAAkB,CAACH,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAA3C;AACA,MAAMI,gBAAgB,GAAGD,kBAAkB,CAACF,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAA3C;AACA,MAAMI,KAAK,GAAGC,YAAY,CAAC3B,MAAD,CAA1B;AACA,MAAM4B,mBAAmB,GAAe,EAAxC;AACA,MAAMC,mBAAmB,GAAe,EAAxC;AAEAH,EAAAA,KAAK,CAACI,OAAN,CAAc,UAAAC,IAAA;AACV,QAAMC,eAAe,GAAGR,kBAAkB,CAACO,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAA1C;AACA,QAAME,OAAO,GAAGC,gBAAgB,CAACC,gCAAgC,CAACZ,gBAAD,EAAmBS,eAAnB,CAAjC,EAAsE,CAACX,KAAD,EAAQU,IAAR,CAAtE,CAAhC;AACA,QAAMK,OAAO,GAAGF,gBAAgB,CAACC,gCAAgC,CAACV,gBAAD,EAAmBO,eAAnB,CAAjC,EAAsE,CAACV,KAAD,EAAQS,IAAR,CAAtE,CAAhC;AAEAH,IAAAA,mBAAmB,CAACS,IAApB,MAAA,CAAAT,mBAAA,EAA4BK,OAA5B;AACAJ,IAAAA,mBAAmB,CAACQ,IAApB,MAAA,CAAAR,mBAAA,EAA4BO,OAA5B;;AAEA,QAAI,CAACJ,eAAe,CAAC,CAAD,CAApB,EAAyB;AACrBJ,MAAAA,mBAAmB,CAACS,IAApB,MAAA,CAAAT,mBAAA,EAA4BK,OAA5B;AACH;;AACD,QAAI,CAACD,eAAe,CAAC,CAAD,CAApB,EAAyB;AACrBH,MAAAA,mBAAmB,CAACQ,IAApB,MAAA,CAAAR,mBAAA,EAA4BO,OAA5B;AACH;AACJ,GAdD;;AAgBA,MAAI,CAAC1B,WAAL,EAAkB;AACd,QACI4B,SAAS,CAACV,mBAAD,EAAsB,UAAAW,CAAA;AAAK,aAAAA,CAAC,CAAC,CAAD,CAAD,KAAS5B,CAAT;AAAU,KAArC,CAAT,GAAkD,CAAC,CAAnD,IACG2B,SAAS,CAACT,mBAAD,EAAsB,UAAAU,CAAA;AAAK,aAAAA,CAAC,CAAC,CAAD,CAAD,KAAS3B,CAAT;AAAU,KAArC,CAAT,GAAkD,CAAC,CAF1D,EAGE;AACE,aAAO,IAAP;AACH;AACJ;;AACD,MACKgB,mBAAmB,CAACY,MAApB,CAA2B,UAAAD,CAAA;AAAK,WAAAA,CAAC,CAAC,CAAD,CAAD,GAAO5B,CAAP;AAAQ,GAAxC,EAA0C8B,MAA1C,GAAmD,CAApD,IACIZ,mBAAmB,CAACW,MAApB,CAA2B,UAAAD,CAAA;AAAK,WAAAA,CAAC,CAAC,CAAD,CAAD,GAAO3B,CAAP;AAAQ,GAAxC,EAA0C6B,MAA1C,GAAmD,CAF3D,EAGE;AACE,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;AAED;;;;;;SAKgBjB,mBAAmBkB,QAAkBC;AAC1C,MAAAC,EAAE,GAAQF,MAAM,EAAA,CAAhB;AAAA,MAAIG,EAAE,GAAIH,MAAM,EAAA,CAAhB;AACA,MAAAI,EAAE,GAAQH,MAAM,EAAA,CAAhB;AAAA,MAAII,EAAE,GAAIJ,MAAM,EAAA,CAAhB;;AAOP,MAAIC,EAAE,KAAKE,EAAP,IAAaD,EAAE,KAAKE,EAAxB,EAA4B;AACxB,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AACH;;AAAC,MAAIH,EAAE,KAAKE,EAAX,EAAe;AACb;AACA,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAACF,EAAR,CAAP;AACH,GAHC,MAGK,IAAIC,EAAE,KAAKE,EAAX,EAAe;AAClB;AACA,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAACF,EAAR,CAAP;AACH,GAHM,MAGA;AACH;AACA;AACA;AACA;AACA;AAEA,QAAMG,GAAC,GAAG,CAACF,EAAE,GAAGF,EAAN,KAAaC,EAAE,GAAGE,EAAlB,CAAV;AACA,QAAME,GAAC,GAAG,CAACL,EAAD,GAAMI,GAAC,GAAGH,EAApB;AACA,WAAO,CAAC,CAAD,EAAIG,GAAJ,EAAOC,GAAP,CAAP;AACH;AACJ;AACD;;;;;SAIgBd,iCACZe,kBACAC;AAEO,MAAAC,EAAE,GAAYF,gBAAgB,EAAA,CAA9B;AAAA,MAAIG,EAAE,GAAQH,gBAAgB,EAAA,CAA9B;AAAA,MAAQI,EAAE,GAAIJ,gBAAgB,EAAA,CAA9B;AACA,MAAAK,EAAE,GAAYJ,gBAAgB,EAAA,CAA9B;AAAA,MAAIK,EAAE,GAAQL,gBAAgB,EAAA,CAA9B;AAAA,MAAQM,EAAE,GAAIN,gBAAgB,EAAA,CAA9B;;AAEP,MAAIC,EAAE,KAAK,CAAP,IAAYG,EAAE,KAAK,CAAvB,EAA0B;AACtB;AACA;AACA,QAAMV,EAAE,GAAG,CAACS,EAAD,GAAMD,EAAjB;AACA,QAAMN,EAAE,GAAG,CAACU,EAAD,GAAMD,EAAjB;;AAEA,QAAIX,EAAE,KAAKE,EAAX,EAAe;AACX,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,CACH,CAAC,CAACW,QAAF,EAAYb,EAAZ,CADG,EAEH,CAACa,QAAD,EAAWb,EAAX,CAFG,CAAP;AAIH;AACJ,GAdD,MAcO,IAAIQ,EAAE,KAAK,CAAP,IAAYG,EAAE,KAAK,CAAvB,EAA0B;AAC7B;AACA;AACA,QAAMZ,EAAE,GAAG,CAACU,EAAD,GAAMF,EAAjB;AACA,QAAMN,EAAE,GAAG,CAACW,EAAD,GAAMF,EAAjB;;AAEA,QAAIX,EAAE,KAAKE,EAAX,EAAe;AACX,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,CACH,CAACF,EAAD,EAAK,CAACc,QAAN,CADG,EAEH,CAACd,EAAD,EAAKc,QAAL,CAFG,CAAP;AAIH;AACJ,GAdM,MAcA,IAAIN,EAAE,KAAK,CAAX,EAAc;AACjB;AACA;AACA;AACA,QAAMxC,CAAC,GAAG,CAAC0C,EAAD,GAAMD,EAAhB;AACA,QAAM1C,CAAC,GAAG,EAAE6C,EAAE,GAAG5C,CAAL,GAAS6C,EAAX,IAAiBF,EAA3B;AAEA,WAAO,CAAC,CAAC5C,CAAD,EAAIC,CAAJ,CAAD,CAAP;AACH,GARM,MAQA,IAAI2C,EAAE,KAAK,CAAX,EAAc;AACjB;AACA;AACA;AACA,QAAM3C,CAAC,GAAG,CAAC6C,EAAD,GAAMD,EAAhB;AACA,QAAM7C,CAAC,GAAG,EAAE0C,EAAE,GAAGzC,CAAL,GAAS0C,EAAX,IAAiBF,EAA3B;AAEA,WAAO,CAAC,CAACzC,CAAD,EAAIC,CAAJ,CAAD,CAAP;AACH,GARM,MAQA,IAAIyC,EAAE,KAAK,CAAX,EAAc;AACjB;AACA;AACA;AACA,QAAM1C,CAAC,GAAG,CAAE2C,EAAF,GAAOF,EAAjB;AACA,QAAMxC,CAAC,GAAG,EAAE2C,EAAE,GAAG5C,CAAL,GAAS8C,EAAX,IAAiBD,EAA3B;AAEA,WAAO,CAAC,CAAC7C,CAAD,EAAIC,CAAJ,CAAD,CAAP;AACH,GARM,MAQA,IAAI4C,EAAE,KAAK,CAAX,EAAc;AACjB;AACA;AACA;AACA,QAAM7C,CAAC,GAAG,CAAE8C,EAAF,GAAOF,EAAjB;AACA,QAAM3C,CAAC,GAAG,EAAEwC,EAAE,GAAGzC,CAAL,GAAS2C,EAAX,IAAiBD,EAA3B;AAEA,WAAO,CAAC,CAAC1C,CAAD,EAAIC,CAAJ,CAAD,CAAP;AACH,GARM,MAQA;AACH;AACA;AACA;AACA;AACA;AACA,QAAMD,CAAC,GAAG,CAAC0C,EAAE,GAAGI,EAAL,GAAUD,EAAE,GAAGF,EAAhB,KAAuBE,EAAE,GAAGJ,EAAL,GAAUC,EAAE,GAAGE,EAAtC,CAAV;AACA,QAAM3C,CAAC,GAAG,EAAEwC,EAAE,GAAGzC,CAAL,GAAS2C,EAAX,IAAiBD,EAA3B;AAEA,WAAO,CAAC,CAAC1C,CAAD,EAAIC,CAAJ,CAAD,CAAP;AACH;AACJ;AACD;;;;;SAIgB+C,sBACZC,OACAC,OACAC;AAEA,MAAM9D,MAAM,GAAGmC,gCAAgC,CAC3CX,kBAAkB,CAACoC,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CADyB,EAE3CpC,kBAAkB,CAACqC,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAFyB,CAA/C;;AAKA,MAAIC,OAAJ,EAAa;AACT,WAAO5B,gBAAgB,CAAClC,MAAD,EAAS,CAAC4D,KAAD,EAAQC,KAAR,CAAT,CAAvB;AACH;;AACD,SAAO7D,MAAP;AACH;AACD;;;;;SAIgBkC,iBACZlC,QACA0B;AAEA,MAAMqC,OAAO,GAAGrC,KAAK,CAACtB,GAAN,CAAU,UAAA2B,IAAA;AAAQ,WAAA,CAAC,CAAD,EAAI,CAAJ,EAAO3B,GAAP,CAAW,UAAA4D,KAAA;AAAS,aAAA,CAClD/D,IAAI,CAACe,GAAL,CAASe,IAAI,CAAC,CAAD,CAAJ,CAAQiC,KAAR,CAAT,EAAyBjC,IAAI,CAAC,CAAD,CAAJ,CAAQiC,KAAR,CAAzB,CADkD,EAElD/D,IAAI,CAACiB,GAAL,CAASa,IAAI,CAAC,CAAD,CAAJ,CAAQiC,KAAR,CAAT,EAAyBjC,IAAI,CAAC,CAAD,CAAJ,CAAQiC,KAAR,CAAzB,CAFkD,CAAA;AAGrD,KAHiC,CAAA;AAGhC,GAHc,CAAhB;;AAIA,MAAIhE,MAAM,CAACyC,MAAP,KAAkB,CAAtB,EAAyB;AACf,QAAAwB,KAASjE,MAAM,CAAC,CAAD,CAAf;AAAA,QAACW,CAAC,QAAF;AAAA,QAAIC,CAAC,QAAL;;AACN,QAAID,CAAC,KAAKX,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAV,EAAwB;AACpB;AACA,UAAMkE,GAAG,GAAGjE,IAAI,CAACiB,GAAL,MAAA,CAAAjB,IAAA,EAAY8D,OAAO,CAAC3D,GAAR,CAAY,UAAA+D,MAAA;AAAU,eAAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAA;AAAY,OAAlC,CAAZ,CAAZ,CAFoB;;AAIpB,UAAMC,MAAM,GAAGnE,IAAI,CAACe,GAAL,MAAA,CAAAf,IAAA,EAAY8D,OAAO,CAAC3D,GAAR,CAAY,UAAA+D,MAAA;AAAU,eAAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAA;AAAY,OAAlC,CAAZ,CAAf;;AAEA,UAAID,GAAG,GAAGE,MAAV,EAAkB;AACd,eAAO,EAAP;AACH;;AACD,aAAO,CACH,CAACzD,CAAD,EAAIuD,GAAJ,CADG,EAEH,CAACvD,CAAD,EAAIyD,MAAJ,CAFG,CAAP;AAIH,KAbD,MAaO,IAAIxD,CAAC,KAAKZ,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAV,EAAwB;AAC3B;AACA,UAAMqE,IAAI,GAAGpE,IAAI,CAACiB,GAAL,MAAA,CAAAjB,IAAA,EAAY8D,OAAO,CAAC3D,GAAR,CAAY,UAAA+D,MAAA;AAAU,eAAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAA;AAAY,OAAlC,CAAZ,CAAb,CAF2B;;AAI3B,UAAMG,KAAK,GAAGrE,IAAI,CAACe,GAAL,MAAA,CAAAf,IAAA,EAAY8D,OAAO,CAAC3D,GAAR,CAAY,UAAA+D,MAAA;AAAU,eAAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAA;AAAY,OAAlC,CAAZ,CAAd;;AAEA,UAAIE,IAAI,GAAGC,KAAX,EAAkB;AACd,eAAO,EAAP;AACH;;AACD,aAAO,CACH,CAACD,IAAD,EAAOzD,CAAP,CADG,EAEH,CAAC0D,KAAD,EAAQ1D,CAAR,CAFG,CAAP;AAIH;AACJ;;AAED,SAAOZ,MAAM,CAACwC,MAAP,CAAc,UAAAnC,KAAA;AACjB,WAAO0D,OAAO,CAACQ,KAAR,CAAc,UAAAJ,MAAA;AACjB,aAAQA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,KAAgB9D,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAL,IAAY8D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAzC,IACCA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,KAAgB9D,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAL,IAAY8D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CADhD;AAEH,KAHM,CAAP;AAIH,GALM,CAAP;AAOH;AACD;;;;;;SAKgBxC,aAAa3B;AACzB,SAAOwE,eAAIxE,MAAM,CAACyE,KAAP,CAAa,CAAb,IAAiBzE,MAAM,CAAC,CAAD,GAA3B,CAAgCI,GAAhC,CAAoC,UAACC,KAAD,EAAQC,CAAR;AAAc,WAAA,CAACN,MAAM,CAACM,CAAD,CAAP,EAAYD,KAAZ,CAAA;AAAkB,GAApE,CAAP;AACH;AACD;;;;;;SAKgBqE,iBAAiBC,SAAqBC;AAClD,MAAMC,MAAM,GAAGlD,YAAY,CAACgD,OAAD,CAA3B;AACA,MAAMG,MAAM,GAAGnD,YAAY,CAACiD,OAAD,CAA3B;AACA,MAAMG,iBAAiB,GAAGF,MAAM,CAACzE,GAAP,CAAW,UAAAwD,KAAA;AAAS,WAAApC,kBAAkB,CAACoC,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAlB;AAAsC,GAA1D,CAA1B;AACA,MAAMoB,iBAAiB,GAAGF,MAAM,CAAC1E,GAAP,CAAW,UAAAyD,KAAA;AAAS,WAAArC,kBAAkB,CAACqC,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAlB;AAAsC,GAA1D,CAA1B;AAEA,MAAMoB,iBAAiB,GAAe,EAAtC;AACA,MAAMC,gBAAgB,GAAGC,iBAAiB,CAACP,OAAD,CAA1C;AAEAE,EAAAA,MAAM,CAAChD,OAAP,CAAe,UAAA+B,KAAA;AACX,QAAIrD,QAAQ,CAACqD,KAAK,CAAC,CAAD,CAAN,EAAWc,OAAX,CAAZ,EAAiC;AAC7BM,MAAAA,iBAAiB,CAACC,gBAAgB,GAAG,CAAnB,GAAuB,MAAvB,GAAgC,SAAjC,CAAjB,CAA6DrB,KAAK,CAAC,CAAD,CAAlE;AACH;AACJ,GAJD;AAKAkB,EAAAA,iBAAiB,CAACjD,OAAlB,CAA0B,UAACoB,gBAAD,EAAmB5C,CAAnB;AACtB,QAAMsD,KAAK,GAAGiB,MAAM,CAACvE,CAAD,CAApB;AACA,QAAM8E,UAAU,GAAe,EAA/B;AAEAJ,IAAAA,iBAAiB,CAAClD,OAAlB,CAA0B,UAACqB,gBAAD,EAAmBkC,CAAnB;AACtB,UAAMC,kBAAkB,GAAGnD,gCAAgC,CAACe,gBAAD,EAAmBC,gBAAnB,CAA3D;AACA,UAAMnD,MAAM,GAAGkC,gBAAgB,CAACoD,kBAAD,EAAqB,CAAC1B,KAAD,EAAQkB,MAAM,CAACO,CAAD,CAAd,CAArB,CAA/B;AAEAD,MAAAA,UAAU,CAAC/C,IAAX,MAAA,CAAA+C,UAAA,EAAmBpF,MAAnB;AACH,KALD;AAMAoF,IAAAA,UAAU,CAACG,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AACZ,aAAOC,OAAO,CAAC9B,KAAK,CAAC,CAAD,CAAN,EAAW4B,CAAX,CAAP,GAAuBE,OAAO,CAAC9B,KAAK,CAAC,CAAD,CAAN,EAAW6B,CAAX,CAArC;AACH,KAFD;AAGAR,IAAAA,iBAAiB,CAAC5C,IAAlB,MAAA,CAAA4C,iBAAA,EAA0BG,UAA1B;;AACA,QAAI5E,QAAQ,CAACoD,KAAK,CAAC,CAAD,CAAN,EAAWgB,OAAX,CAAZ,EAAiC;AAC7BK,MAAAA,iBAAiB,CAAC5C,IAAlB,CAAuBuB,KAAK,CAAC,CAAD,CAA5B;AACH;AACJ,GAjBD;AAkBA,MAAM+B,QAAQ,GAA4B,EAA1C;AAEA,SAAOV,iBAAiB,CAACzC,MAAlB,CAAyB,UAAAnC,KAAA;AAC5B,QAAMuF,GAAG,GAAMvF,KAAK,CAAC,CAAD,CAAL,MAAA,GAAYA,KAAK,CAAC,CAAD,CAAhC;;AAEA,QAAIsF,QAAQ,CAACC,GAAD,CAAZ,EAAmB;AACf,aAAO,KAAP;AACH;;AACDD,IAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgB,IAAhB;AACA,WAAO,IAAP;AACH,GARM,CAAP;AASH;AACD;;;;;;SAKgBC,eAAelB,SAAqBC;AAChD,MAAM5E,MAAM,GAAG0E,gBAAgB,CAACC,OAAD,EAAUC,OAAV,CAA/B;AAEA,SAAO7E,WAAW,CAACC,MAAD,CAAlB;AACH;;;;"}