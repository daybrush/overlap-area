/*
Copyright (c) 2020 Daybrush
name: overlap-area
license: MIT
author: Daybrush
repository: git+https://github.com/daybrush/overlap-area.git
version: 1.1.0
*/
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(n=n||self).OverlapArea=t()}(this,function(){"use strict";function p(){for(var n=0,t=0,r=arguments.length;t<r;t++)n+=arguments[t].length;for(var e=Array(n),i=0,t=0;t<r;t++)for(var u=arguments[t],o=0,a=u.length;o<a;o++,i++)e[i]=u[o];return e}var a=1e-7;function u(n,t,r){void 0===r&&(r=-1);for(var e=n.length,i=0;i<e;++i)if(t(n[i],i,n))return i;return r}function h(n,t,r){t=u(n,t);return-1<t?n[t]:r}function e(n,t){var r=t[0]-n[0],n=t[1]-n[1],r=Math.atan2(n,r);return 0<=r?r:r+2*Math.PI}function i(n){return[0,1].map(function(t){return function(n){for(var t=n.length,r=0,e=t-1;0<=e;--e)r+=n[e];return t?r/t:0}(n.map(function(n){return n[t]}))})}function s(n){var t=i(n),r=e(t,n[0]),n=e(t,n[1]);return r<n&&n-r<Math.PI||n<r&&n-r<-Math.PI?1:-1}function v(n,t){return Math.sqrt(Math.pow((t?t[0]:0)-n[0],2)+Math.pow((t?t[1]:0)-n[1],2))}function l(n){return function(n,t){if(!t)return n;var r=1/t;return Math.round(n/t)/r}(n,a)}function r(r){return r.length<3?0:Math.abs(function(n){for(var t=0,r=n.length-1;0<=r;--r)t+=n[r];return t}(r.map(function(n,t){t=r[t+1]||r[0];return n[0]*t[1]-t[0]*n[1]})))/2}function m(n){var t=n.map(function(n){return n[0]}),n=n.map(function(n){return n[1]});return{minX:Math.min.apply(Math,t),minY:Math.min.apply(Math,n),maxX:Math.max.apply(Math,t),maxY:Math.max.apply(Math,n)}}function d(i,n,t){var e=i[0],u=i[1],r=m(n),o=r.minX,r=r.maxX,a=[[o,u],[r,u]],f=x(a[0],a[1]),n=P(n),c=[];if(n.forEach(function(n){var r,t=x(n[0],n[1]),e=n[0];r=t,f.every(function(n,t){return 0===l(n-r[t])})?c.push({pos:i,line:n,type:"line"}):g(M(f,t),[a,n]).forEach(function(r){n.some(function(n){return t=r,!l((n=n)[0]-t[0])&&!l(n[1]-t[1]);var t})?c.push({pos:r,line:n,type:"point"}):0!==l(e[1]-u)&&c.push({pos:r,line:n,type:"intersection"})})}),!t&&h(c,function(n){return n[0]===e}))return!0;var p=0,s={};return c.forEach(function(n){var t=n.pos,r=n.type,n=n.line;t[0]>e||("intersection"===r?++p:"line"===r||"point"===r&&(r=h(n,function(n){return n[1]!==u}),n=s[t[0]],r=r[1]>u?1:-1,n?n!==r&&++p:s[t[0]]=r))}),p%2==1}function o(n,t){var r=n[0],e=n[1],n=n[2];return(r*t[0]+e*t[1]+n)/(r*r+e*e)}function x(n,t){var r=n[0],e=n[1],i=t[0]-r,u=t[1]-e;Math.abs(i)<a&&(i=0),Math.abs(u)<a&&(u=0);var o=0,n=0,t=0;return i?t=u?(n=1,-(o=-u/i)*r-e):(n=1,-e):u&&(o=-1,t=r),[o,n,t]}function M(n,t){var r,e,i=n[0],u=n[1],o=n[2],a=t[0],f=t[1],c=t[2],n=0===i&&0===a,t=0===u&&0===f;if(n&&t)return[];if(n){n=-o/u;return n!=-c/f?[]:[[-1/0,n],[1/0,n]]}if(t){t=-o/i;return t!=-c/a?[]:[[t,-1/0],[t,1/0]]}return(0===i?[[r=-(f*(e=-o/u)+c)/a,e]]:0===a?[[r=-(u*(e=-c/f)+o)/i,e]]:0===u?[[r=-o/i,e=-(a*r+c)/f]]:0===f?[[r=-c/a,e=-(i*r+o)/u]]:[[r=(u*c-f*o)/(f*i-u*a),e=-(i*r+o)/u]]).map(function(n){return[n[0],n[1]]})}function y(n,t){return 0===l(o(x(t[0],t[1]),n))}function g(n,t){var e=t.map(function(t){return[0,1].map(function(n){return[Math.min(t[0][n],t[1][n]),Math.max(t[0][n],t[1][n])]})}),r=[];if(2===n.length){var i=n[0],u=i[0],t=i[1];if(l(u-n[1][0])){if(!l(t-n[1][1])){var i=Math.max.apply(Math,e.map(function(n){return n[0][0]})),o=Math.min.apply(Math,e.map(function(n){return n[0][1]}));if(0<l(i-o))return[];r=[[i,t],[o,t]]}}else{o=Math.max.apply(Math,e.map(function(n){return n[1][0]})),t=Math.min.apply(Math,e.map(function(n){return n[1][1]}));if(0<l(o-t))return[];r=[[u,o],[u,t]]}}return r.length||(r=n.filter(function(n){var t=n[0],r=n[1];return e.every(function(n){return 0<=l(t-n[0][0])&&0<=l(n[0][1]-t)&&0<=l(r-n[1][0])&&0<=l(n[1][1]-r)})})),r.map(function(n){return[l(n[0]),l(n[1])]})}function P(r){return p(r.slice(1),[r[0]]).map(function(n,t){return[r[t],n]})}function f(n,t){var i=n.slice(),o=t.slice();-1===s(i)&&i.reverse(),-1===s(o)&&o.reverse();var a=P(i),f=P(o),t=a.map(function(n){return x(n[0],n[1])}),c=f.map(function(n){return x(n[0],n[1])}),p=[];t.forEach(function(r,e){var i=a[e],u=[];c.forEach(function(n,t){n=g(M(r,n),[i,f[t]]);u.push.apply(u,n.map(function(n){return{index1:e,index2:t,pos:n,type:"intersection"}}))}),u.sort(function(n,t){return v(i[0],n.pos)-v(i[0],t.pos)}),p.push.apply(p,u),d(i[1],o)&&p.push({index1:e,index2:-1,pos:i[1],type:"inside"})}),f.forEach(function(n,r){var e,t;d(n[1],i)&&(e=!1,-1===(t=u(p,function(n){return n.index2!==r?!!e:void(e=!0)}))&&(e=!1,t=u(p,function(n){var t=n.index1,n=n.index2;if(-1!==t||n+1!==r)return!!e;e=!0})),-1===t?p.push({index1:-1,index2:r,pos:n[1],type:"inside"}):p.splice(t,0,{index1:-1,index2:r,pos:n[1],type:"inside"}))});var r={};return p.filter(function(n){n=n.pos,n=n[0]+"x"+n[1];return!r[n]&&(r[n]=!0)})}function c(n,t){return f(n,t).map(function(n){return n.pos})}function b(n,t){f(n,t);var e,i=[];return f(n,t).forEach(function(n,t,r){0!==t&&function(n){var t=(e=n[0]).index1,r=e.index2,n=(e=n[1]).index1,e=e.index2;if(-1!==t){if(t===n)return 1;if(t+1===n)return 1}if(-1!==r){if(r===e)return 1;if(r+1===e)return 1}}([r[t-1],n])?e.push(n):(e=[n],i.push(e))}),i.map(function(n){return n.map(function(n){return n.pos})})}function O(i,u,o,a){void 0===o&&(o=0),void 0===a&&(a=[]);for(var f=0===a.length,n=i.length,t=i[o]?o:0,c=p(i.slice(t),i.slice(0,t)),r=0;r<n;++r)if("break"===function(n){var r=c[n];if(h(u,function(n){return n[0]===r[0]&&n[1]===r[1]}))return"continue";if(a.some(function(n){return h(n,function(n){return n[0]===r[0]&&n[1]===r[1]})}))return f?"continue":"break";var t=void 0;f?(t=[],a.push(t)):t=a[a.length-1],t.push(r);var e=[r,i[o+1]||i[0]],t=u.filter(function(n){return y(n,e)}).sort(function(n,t){return v(r,n)-v(r,t)})[0];if(!t)return O(c,u,n+1,a),"break";t=u.indexOf(t);return O(u,i,t,a),f?void 0:"break"}(r))break;return a}return{__proto__:null,getAreaSize:r,fitPoints:function(n,t){var r=t.width,e=t.height,i=t.left,u=t.top,o=(f=m(n)).minX,a=f.minY,t=f.maxX,f=f.maxY,c=r/(t-o),p=e/(f-a);return n.map(function(n){return[i+(n[0]-o)*c,u+(n[1]-a)*p]})},getMinMaxs:m,isInside:d,getDistanceFromPointToConstants:o,getLinearConstants:x,getIntersectionPointsByConstants:M,getIntersectionPoints:function(n,t,r){var e=M(x(n[0],n[1]),x(t[0],t[1]));return r?g(e,[n,t]):e},isPointOnLine:y,getPointsOnLines:g,convertLines:P,getOverlapPoints:c,getOverlapAreas:b,findConnectedAreas:function(n,t){return O(n,p(t).reverse())},getUnoverlapAreas:function(n,t){if(!t.length)return[p(n)];var t=b(n,t),r=[n];return t.forEach(function(n){var i=p(n).reverse();r=r.map(function(n){var r,t=O(n,i),e=t[0];return 1===t.length&&i.every(function(n){return-1===e.indexOf(n)})&&(r=e[e.length-1],n=p(i).sort(function(n,t){return v(r,n)-v(r,t)})[0],n=i.indexOf(n),e.push.apply(e,p(i.slice(n),i.slice(0,n),[i[n],r]))),t}).reduce(function(n,t){return n.push.apply(n,t),n},[])}),r},getOverlapSize:function(n,t){return r(c(n,t))}}});
//# sourceMappingURL=overlap-area.min.js.map
