{"version":3,"file":"overlap-area.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { sum, findIndex, getShapeDirection, getDist } from \"@daybrush/utils\";\nimport { PointInfo, Rect } from \"./types\";\n\n/**\n * @namespace OverlapArea\n */\n\n/**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */\nexport function getAreaSize(points: number[][]): number {\n    if (points.length < 3) {\n        return 0;\n    }\n    return Math.abs(sum(points.map((point, i) => {\n        const nextPoint = points[i + 1] || points[0];\n\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n\n\n/**\n * Get points that fit the rect,\n * @memberof OverlapArea\n */\nexport function fitPoints(points: number[][], rect: Rect): number[][] {\n    const { width, height, left, top } = rect;\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const ratioX = width / (maxX - minX);\n    const ratioY = height / (maxY - minY);\n\n    return points.map(point => {\n        return [\n            left + (point[0] - minX) * ratioX,\n            top + (point[1] - minY) * ratioY,\n        ];\n    });\n}\n/**\n * Get the minimum and maximum points of the points.\n * @memberof OverlapArea\n */\nexport function getMinMaxs(points: number[][]): { minX: number, minY: number, maxX: number, maxY: number } {\n    const xs = points.map(point => point[0]);\n    const ys = points.map(point => point[1]);\n\n    return {\n        minX: Math.min(...xs),\n        minY: Math.min(...ys),\n        maxX: Math.max(...xs),\n        maxY: Math.max(...ys),\n    };\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */\nexport function isInside(pos: number[], points: number[][], excludeLine?: boolean): boolean {\n    const [x, y] = pos;\n    const {\n        minX,\n        minY,\n        maxX,\n        maxY,\n    } = getMinMaxs(points);\n\n    const xLine = [[minX, y], [maxX, y]];\n    const yLine = [[x, minY], [x, maxY]];\n    const xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    const yLinearConstants = getLinearConstants(yLine[0], yLine[1]);\n    const lines = convertLines(points);\n    const intersectionXPoints: number[][] = [];\n    const intersectionYPoints: number[][] = [];\n\n    lines.forEach(line => {\n        const linearConstants = getLinearConstants(line[0], line[1]);\n        const xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);\n        const yPoints = getPointsOnLines(getIntersectionPointsByConstants(yLinearConstants, linearConstants), [yLine, line]);\n\n        if (xPoints.length === 1 ? line[0][1] !== y : true) {\n            intersectionXPoints.push(...xPoints);\n        }\n        if (yPoints.length === 1 ? line[0][0] !== x : true) {\n            intersectionYPoints.push(...yPoints);\n        }\n\n        if (!linearConstants[0]) {\n            intersectionXPoints.push(...xPoints);\n        }\n        if (!linearConstants[1]) {\n            intersectionYPoints.push(...yPoints);\n        }\n    });\n\n    if (!excludeLine) {\n        if (\n            findIndex(intersectionXPoints, p => p[0] === x) > -1\n            || findIndex(intersectionYPoints, p => p[1] === y) > -1\n        ) {\n            return true;\n        }\n    }\n    if (\n        (intersectionXPoints.filter(p => p[0] > x).length % 2)\n        && (intersectionYPoints.filter(p => p[1] > y).length % 2)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getLinearConstants(point1: number[], point2: number[]): [number, number, number] {\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    // ax + by + c = 0\n    // [a, b, c]\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\n    if (x1 === x2 && y1 === y2) {\n        return [0, 0, 0];\n    } if (x1 === x2) {\n        // x = x1\n        return [1, 0, -x1];\n    } else if (y1 === y2) {\n        // y = y1\n        return [0, 1, -y1];\n    } else {\n        // x1 + a * y1 + b = 0\n        // x2 + a * y2 + b = 0\n        // (x1 -x2) + (y1 - y2) * a = 0\n        // a = (x2 - x1) / (y1 - y2)\n        // x1 + (x2 - x1) / (y1 - y2)\n\n        const a = (x2 - x1) / (y1 - y2);\n        const b = -x1 - a * y1;\n        return [1, a, b];\n    }\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */\nexport function getIntersectionPointsByConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n): number[][] {\n    const [a1, b1, c1] = linearConstants1;\n    const [a2, b2, c2] = linearConstants2;\n\n    const isZeroA = a1 === 0 && a2 === 0;\n    const isZeroB = b1 === 0 && b2 === 0;\n    if (isZeroA && isZeroB) {\n        return [];\n    } else if (isZeroA) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        const y1 = -c1 / b1;\n        const y2 = -c2 / b2;\n\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [-Infinity, y1],\n                [Infinity, y1],\n            ];\n        }\n    } else if (isZeroB) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        const x1 = -c1 / a1;\n        const x2 = -c2 / a2;\n\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [x1, -Infinity],\n                [x1, Infinity],\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        const y = -c1 / b1;\n        const x = -(b2 * y + c2) / a2;\n\n        return [[x, y]];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        const y = -c2 / b2;\n        const x = -(b1 * y + c1) / a1;\n\n        return [[x, y]];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        const x = - c1 / a1;\n        const y = -(a2 * x + c2) / b2;\n\n        return [[x, y]];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        const x = - c2 / a2;\n        const y = -(a1 * x + c1) / b1;\n\n        return [[x, y]];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        const x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        const y = -(a1 * x + c1) / b1;\n\n        return [[x, y]];\n    }\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */\nexport function getIntersectionPoints(\n    line1: number[][],\n    line2: number[][],\n    isLimit?: boolean,\n): number[][] {\n    const points = getIntersectionPointsByConstants(\n        getLinearConstants(line1[0], line1[1]),\n        getLinearConstants(line2[0], line2[1]),\n    );\n\n    if (isLimit) {\n        return getPointsOnLines(points, [line1, line2]);\n    }\n    return points;\n}\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */\nexport function getPointsOnLines(\n    points: number[][],\n    lines: number[][][],\n): number[][] {\n    const minMaxs = lines.map(line => [0, 1].map(order => [\n        Math.min(line[0][order], line[1][order]),\n        Math.max(line[0][order], line[1][order]),\n    ]));\n    if (points.length === 2) {\n        const [x, y] = points[0];\n        if (x === points[1][0]) {\n            /// Math.max(minY1, minY2)\n            const top = Math.max(...minMaxs.map(minMax => minMax[1][0]));\n            /// Math.min(maxY1, miax2)\n            const bottom = Math.min(...minMaxs.map(minMax => minMax[1][1]));\n\n            if (top > bottom) {\n                return [];\n            }\n            return [\n                [x, top],\n                [x, bottom],\n            ];\n        } else if (y === points[1][1]) {\n            /// Math.max(minY1, minY2)\n            const left = Math.max(...minMaxs.map(minMax => minMax[0][0]));\n            /// Math.min(maxY1, miax2)\n            const right = Math.min(...minMaxs.map(minMax => minMax[0][1]));\n\n            if (left > right) {\n                return [];\n            }\n            return [\n                [left, y],\n                [right, y],\n            ];\n        }\n    }\n\n    return points.filter(point => {\n        return minMaxs.every(minMax => {\n            return (minMax[0][0] <= point[0] && point[0] <= minMax[0][1])\n                && (minMax[1][0] <= point[1] && point[1] <= minMax[1][1]);\n        });\n    });\n\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/\nexport function convertLines(points: number[][]): number[][][] {\n    return [...points.slice(1), points[0]].map((point, i) => [points[i], point]);\n}\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapPoints(points1: number[][], points2: number[][]): number[][] {\n    const targetPoints1 = points1.slice();\n    const targetPoints2 = points2.slice();\n\n    if (getShapeDirection(targetPoints1) === -1) {\n        targetPoints1.reverse();\n    }\n    if (getShapeDirection(targetPoints2) === -1) {\n        targetPoints2.reverse();\n    }\n    const lines1 = convertLines(targetPoints1);\n    const lines2 = convertLines(targetPoints2);\n    const linearConstantss1 = lines1.map(line1 => getLinearConstants(line1[0], line1[1]));\n    const linearConstantss2 = lines2.map(line2 => getLinearConstants(line2[0], line2[1]));\n\n    const overlapInfos: Array<{\n        index1: number;\n        index2: number;\n        pos: number[];\n    }> = [];\n\n    linearConstantss1.forEach((linearConstants1, i) => {\n        const line1 = lines1[i];\n        const linePointInfos: PointInfo[] = [];\n        linearConstantss2.forEach((linearConstants2, j) => {\n            const intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            const points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);\n\n            linePointInfos.push(...points.map(pos => ({\n                index1: i,\n                index2: j,\n                pos,\n            })));\n        });\n        linePointInfos.sort((a, b) => {\n            return getDist(line1[0], a.pos) - getDist(line1[0], b.pos);\n        });\n\n        overlapInfos.push(...linePointInfos);\n\n        if (isInside(line1[1], targetPoints2)) {\n            overlapInfos.push({\n                index1: i,\n                index2: -1,\n                pos: line1[1],\n            });\n        }\n    });\n\n    lines2.forEach((line2, i) => {\n        if (isInside(line2[1], targetPoints1)) {\n            let isNext = false;\n            let index = findIndex(overlapInfos, ({ index2 }) => {\n                if (index2 === i) {\n                    isNext = true;\n                    return false;\n                }\n\n                if (isNext) {\n                    return true;\n                }\n                return false;\n            });\n            if (index === -1) {\n                isNext = false;\n                index = findIndex(overlapInfos, ({ index1, index2 }) => {\n                    if (index1 === -1 && index2 + 1 === i) {\n                        isNext = true;\n                        return false;\n                    }\n\n                    if (isNext) {\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            if (index === -1) {\n                overlapInfos.push({\n                    index1: -1,\n                    index2: i,\n                    pos: line2[1],\n                });\n            } else {\n                overlapInfos.splice(index, 0, {\n                    index1: -1,\n                    index2: i,\n                    pos: line2[1],\n                });\n            }\n        }\n    });\n    // console.log(overlapInfos);\n    const overlapPoints = overlapInfos.map(({ pos }) => pos);\n    const pointMap: Record<string, boolean> = {};\n\n    return overlapPoints.filter(point => {\n        const key = `${point[0]}x${point[1]}`;\n\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapSize(points1: number[][], points2: number[][]): number {\n    const points = getOverlapPoints(points1, points2);\n\n    return getAreaSize(points);\n}\n"],"names":["getAreaSize","points","length","Math","abs","sum","map","point","i","nextPoint","fitPoints","rect","width","height","left","top","_a","getMinMaxs","minX","minY","maxX","maxY","ratioX","ratioY","xs","ys","min","max","isInside","pos","excludeLine","x","y","xLine","yLine","xLinearConstants","getLinearConstants","yLinearConstants","lines","convertLines","intersectionXPoints","intersectionYPoints","forEach","line","linearConstants","xPoints","getPointsOnLines","getIntersectionPointsByConstants","yPoints","push","findIndex","p","filter","point1","point2","x1","y1","x2","y2","a_1","b_1","linearConstants1","linearConstants2","a1","b1","c1","a2","b2","c2","isZeroA","isZeroB","Infinity","getIntersectionPoints","line1","line2","isLimit","minMaxs","order","minMax","bottom","right","every","__spreadArrays","slice","getOverlapPoints","points1","points2","targetPoints1","targetPoints2","getShapeDirection","reverse","lines1","lines2","linearConstantss1","linearConstantss2","overlapInfos","linePointInfos","j","intersectionPoints","index1","index2","sort","a","b","getDist","isNext_1","index","splice","overlapPoints","pointMap","key","getOverlapSize"],"mappings":"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"}