{"version":3,"file":"overlap-area.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import { throttle, TINY_NUM } from \"@daybrush/utils\";\n\nexport function tinyThrottle(num: number) {\n    return throttle(num, TINY_NUM);\n}\n\nexport function isSameConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n) {\n    return linearConstants1.every((v, i) => tinyThrottle(v - linearConstants2[i]) === 0);\n}\n\nexport function isSamePoint(\n    point1: number[],\n    point2: number[],\n) {\n    return !tinyThrottle(point1[0] - point2[0]) && !tinyThrottle(point1[1] - point2[1]);\n}\n\nexport function flat<Type extends any>(arr: Type[][]): Type[] {\n    return arr.reduce<Type[]>((prev, current) => {\n        prev.push(...current);\n        return prev;\n    }, []);\n}\n","import { sum, findIndex, getShapeDirection, getDist, throttle, TINY_NUM, find } from \"@daybrush/utils\";\nimport { OverlapPointInfo, PointInfo, Rect } from \"./types\";\nimport { flat, isSameConstants, isSamePoint, tinyThrottle } from \"./utils\";\n\n/**\n * @namespace OverlapArea\n */\n\n/**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */\nexport function getAreaSize(points: number[][]): number {\n    if (points.length < 3) {\n        return 0;\n    }\n    return Math.abs(sum(points.map((point, i) => {\n        const nextPoint = points[i + 1] || points[0];\n\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n\n\n/**\n * Get points that fit the rect,\n * @memberof OverlapArea\n */\nexport function fitPoints(points: number[][], rect: Rect): number[][] {\n    const { width, height, left, top } = rect;\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const ratioX = width / (maxX - minX);\n    const ratioY = height / (maxY - minY);\n\n    return points.map(point => {\n        return [\n            left + (point[0] - minX) * ratioX,\n            top + (point[1] - minY) * ratioY,\n        ];\n    });\n}\n/**\n * Get the minimum and maximum points of the points.\n * @memberof OverlapArea\n */\nexport function getMinMaxs(points: number[][]): { minX: number, minY: number, maxX: number, maxY: number } {\n    const xs = points.map(point => point[0]);\n    const ys = points.map(point => point[1]);\n\n    return {\n        minX: Math.min(...xs),\n        minY: Math.min(...ys),\n        maxX: Math.max(...xs),\n        maxY: Math.max(...ys),\n    };\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */\nexport function isInside(pos: number[], points: number[][], excludeLine?: boolean): boolean {\n    const [x, y] = pos;\n    const {\n        minX,\n        maxX,\n    } = getMinMaxs(points);\n\n    const xLine = [[minX, y], [maxX, y]];\n    const xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    const lines = convertLines(points);\n\n    interface IntersectionPosInfo {\n        pos: number[];\n        line: number[][];\n        type: \"intersection\" | \"point\" | \"line\";\n    }\n    const intersectionPosInfos: IntersectionPosInfo[] = [];\n\n    lines.forEach(line => {\n        const linearConstants = getLinearConstants(line[0], line[1]);\n        const standardPoint = line[0];\n\n        if (isSameConstants(xLinearConstants, linearConstants)) {\n            intersectionPosInfos.push({\n                pos: pos,\n                line,\n                type: \"line\",\n            });\n        } else {\n            const xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);\n\n            xPoints.forEach(point => {\n                if (line.some(linePoint => isSamePoint(linePoint, point))) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line,\n                        type: \"point\",\n                    });\n                } else if (tinyThrottle(standardPoint[1] - y) !== 0) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line,\n                        type: \"intersection\",\n                    });\n                }\n            })\n        }\n    });\n\n    if (!excludeLine) {\n        // on line\n        if (find(intersectionPosInfos, p => p[0] === x)) {\n            return true;\n        }\n    }\n    let intersectionCount = 0;\n    const xMap = {};\n\n    intersectionPosInfos.forEach(({ pos, type, line }) => {\n        if (pos[0] > x) {\n            return;\n        }\n        if (type === \"intersection\") {\n            ++intersectionCount;\n        } else if (type === \"line\") {\n            return;\n        } else if (type === \"point\") {\n            const point = find(line, linePoint => linePoint[1] !== y);\n            const prevValue = xMap[pos[0]];\n            const nextValue = point[1] > y ? 1 : -1;\n\n            if (!prevValue) {\n                xMap[pos[0]] = nextValue;\n            } else if (prevValue !== nextValue) {\n                ++intersectionCount;\n            }\n        }\n    });\n    return intersectionCount % 2 === 1;\n}\n/**\n * Get distance from point to constants. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getDistanceFromPointToConstants(\n    [a, b, c]: [number, number, number],\n    pos: number[],\n) {\n    return (a * pos[0] + b * pos[1] + c) / (a * a + b * b);\n}\n\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */\nexport function getLinearConstants(point1: number[], point2: number[]): [number, number, number] {\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    // ax + by + c = 0\n    // [a, b, c]\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n\n    // b > 0\n    // ax + by + c = 0\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    if (!dx) {\n        if (dy) {\n            // -x + 1 = 0\n            a = -1;\n            c = x1;\n        }\n    } else if (!dy) {\n        // y - 1 = 0\n        b = 1;\n        c = -y1;\n    } else {\n        // y = -a(x - x1) + y1\n        // ax + y + a * x1 - y1 = 0\n        a = -dy / dx;\n        b = 1;\n        c = -a * x1 - y1;\n    }\n\n    return [a, b, c] as [number, number, number];\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */\nexport function getIntersectionPointsByConstants(\n    linearConstants1: number[],\n    linearConstants2: number[],\n): number[][] {\n    const [a1, b1, c1] = linearConstants1;\n    const [a2, b2, c2] = linearConstants2;\n\n    const isZeroA = a1 === 0 && a2 === 0;\n    const isZeroB = b1 === 0 && b2 === 0;\n    let results: number[][] = [];\n\n    if (isZeroA && isZeroB) {\n        return [];\n    } else if (isZeroA) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        const y1 = -c1 / b1;\n        const y2 = -c2 / b2;\n\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [-Infinity, y1],\n                [Infinity, y1],\n            ];\n        }\n    } else if (isZeroB) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        const x1 = -c1 / a1;\n        const x2 = -c2 / a2;\n\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [x1, -Infinity],\n                [x1, Infinity],\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        const y = -c1 / b1;\n        const x = -(b2 * y + c2) / a2;\n\n        results = [[x, y]];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        const y = -c2 / b2;\n        const x = -(b1 * y + c1) / a1;\n\n        results = [[x, y]];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        const x = - c1 / a1;\n        const y = -(a2 * x + c2) / b2;\n\n        results = [[x, y]];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        const x = - c2 / a2;\n        const y = -(a1 * x + c1) / b1;\n\n        results = [[x, y]];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        const x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        const y = -(a1 * x + c1) / b1;\n\n        results = [[x, y]];\n    }\n\n    return results.map(result => [result[0], result[1]]);\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */\nexport function getIntersectionPoints(\n    line1: number[][],\n    line2: number[][],\n    isLimit?: boolean,\n): number[][] {\n    const points = getIntersectionPointsByConstants(\n        getLinearConstants(line1[0], line1[1]),\n        getLinearConstants(line2[0], line2[1]),\n    );\n\n    if (isLimit) {\n        return getPointsOnLines(points, [line1, line2]);\n    }\n    return points;\n}\n\nexport function isPointOnLine(\n    pos: number[],\n    line: number[][],\n) {\n    const linearConstants = getLinearConstants(line[0], line[1]);\n\n    return tinyThrottle(getDistanceFromPointToConstants(linearConstants, pos)) === 0;\n}\n\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */\nexport function getPointsOnLines(\n    points: number[][],\n    lines: number[][][],\n): number[][] {\n    const minMaxs = lines.map(line => [0, 1].map(order => [\n        Math.min(line[0][order], line[1][order]),\n        Math.max(line[0][order], line[1][order]),\n    ]));\n    let results: number[][] = [];\n\n    if (points.length === 2) {\n        const [x, y] = points[0];\n        if (!tinyThrottle(x - points[1][0])) {\n            /// Math.max(minY1, minY2)\n            const top = Math.max(...minMaxs.map(minMax => minMax[1][0]));\n            /// Math.min(maxY1, miax2)\n            const bottom = Math.min(...minMaxs.map(minMax => minMax[1][1]));\n\n            if (tinyThrottle(top - bottom) > 0) {\n                return [];\n            }\n            results = [\n                [x, top],\n                [x, bottom],\n            ];\n        } else if (!tinyThrottle(y - points[1][1])) {\n            /// Math.max(minY1, minY2)\n            const left = Math.max(...minMaxs.map(minMax => minMax[0][0]));\n            /// Math.min(maxY1, miax2)\n            const right = Math.min(...minMaxs.map(minMax => minMax[0][1]));\n\n            if (tinyThrottle(left - right) > 0) {\n                return [];\n            }\n            results = [\n                [left, y],\n                [right, y],\n            ];\n        }\n    }\n\n    if (!results.length) {\n        results = points.filter(point => {\n            const [pointX, pointY] = point;\n\n            return minMaxs.every(minMax => {\n                return (0 <= tinyThrottle(pointX - minMax[0][0]) && 0 <= tinyThrottle(minMax[0][1] - pointX))\n                && (0 <= tinyThrottle(pointY - minMax[1][0]) && 0 <= tinyThrottle(minMax[1][1] - pointY));\n            });\n        });\n    }\n\n    return results.map(result => [tinyThrottle(result[0]), tinyThrottle(result[1])]);\n\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/\nexport function convertLines(points: number[][]): number[][][] {\n    return [...points.slice(1), points[0]].map((point, i) => [points[i], point]);\n}\n\nfunction getOverlapPointInfos(points1: number[][], points2: number[][]): OverlapPointInfo[] {\n    const targetPoints1 = points1.slice();\n    const targetPoints2 = points2.slice();\n\n    if (getShapeDirection(targetPoints1) === -1) {\n        targetPoints1.reverse();\n    }\n    if (getShapeDirection(targetPoints2) === -1) {\n        targetPoints2.reverse();\n    }\n    const lines1 = convertLines(targetPoints1);\n    const lines2 = convertLines(targetPoints2);\n    const linearConstantsList1 = lines1.map(line1 => getLinearConstants(line1[0], line1[1]));\n    const linearConstantsList2 = lines2.map(line2 => getLinearConstants(line2[0], line2[1]));\n\n    const overlapInfos: OverlapPointInfo[] = [];\n\n    linearConstantsList1.forEach((linearConstants1, i) => {\n        const line1 = lines1[i];\n        const linePointInfos: OverlapPointInfo[] = [];\n        linearConstantsList2.forEach((linearConstants2, j) => {\n            const intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            const points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);\n\n            linePointInfos.push(...points.map(pos => ({\n                index1: i,\n                index2: j,\n                pos,\n                type: \"intersection\" as const,\n            })));\n        });\n        linePointInfos.sort((a, b) => {\n            return getDist(line1[0], a.pos) - getDist(line1[0], b.pos);\n        });\n\n        overlapInfos.push(...linePointInfos);\n\n        if (isInside(line1[1], targetPoints2)) {\n            overlapInfos.push({\n                index1: i,\n                index2: -1,\n                pos: line1[1],\n                type: \"inside\" as const,\n            });\n        }\n    });\n\n    lines2.forEach((line2, i) => {\n        if (!isInside(line2[1], targetPoints1)) {\n            return;\n        }\n        let isNext = false;\n        let index = findIndex(overlapInfos, ({ index2 }) => {\n            if (index2 === i) {\n                isNext = true;\n                return false;\n            }\n\n            if (isNext) {\n                return true;\n            }\n            return false;\n        });\n        if (index === -1) {\n            isNext = false;\n            index = findIndex(overlapInfos, ({ index1, index2 }) => {\n                if (index1 === -1 && index2 + 1 === i) {\n                    isNext = true;\n                    return false;\n                }\n\n                if (isNext) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        if (index === -1) {\n            overlapInfos.push({\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\" as const,\n            });\n        } else {\n            overlapInfos.splice(index, 0, {\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\" as const,\n            });\n\n        }\n    });\n    const pointMap: Record<string, boolean> = {};\n\n    return overlapInfos.filter(({ pos }) => {\n        const key = `${pos[0]}x${pos[1]}`;\n\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapPoints(points1: number[][], points2: number[][]): number[][] {\n    const infos = getOverlapPointInfos(points1, points2);\n\n    return infos.map(({ pos }) => pos);\n}\n\nfunction isConnectedLine(line: OverlapPointInfo[]) {\n    const {\n        0: {\n            index1: prevIndex1,\n            index2: prevIndex2,\n        },\n        1: {\n            index1: nextIndex1,\n            index2: nextIndex2,\n        }\n    } = line;\n\n    if (prevIndex1 !== -1) {\n        // same line\n        if (prevIndex1 === nextIndex1) {\n            return true;\n        }\n        if (prevIndex1 + 1 === nextIndex1) {\n            return true;\n        }\n    }\n    if (prevIndex2 !== -1) {\n        // same line\n        if (prevIndex2 === nextIndex2) {\n            return true;\n        }\n        if (prevIndex2 + 1 === nextIndex2) {\n            return true;\n        }\n    }\n\n    return false;\n\n}\n/**\n* Get the areas of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapAreas(points1: number[][], points2: number[][]): number[][][] {\n    const infos = getOverlapPointInfos(points1, points2);\n    const areas: OverlapPointInfo[][] = [];\n    let area: OverlapPointInfo[];\n\n    getOverlapPointInfos(points1, points2).forEach((info, i, arr) => {\n        if (i === 0 || !isConnectedLine([arr[i - 1], info])) {\n            area = [info];\n            areas.push(area);\n        } else {\n            area.push(info);\n        }\n    });\n\n    return areas.map(area => area.map(({ pos }) => pos));\n}\nfunction findReversedAreas(points1: number[][], points2: number[][], index: number = 0, areas: number[][][] = []): number[][][] {\n    const isFirst = areas.length === 0;\n    const length = points1.length;\n    const nextIndex = points1[index] ? index : 0;\n    const nextPoints1 = [...points1.slice(nextIndex), ...points1.slice(0, nextIndex)];\n\n    for (let i = 0; i < length; ++i) {\n        const point1 = nextPoints1[i];\n\n        if (find(points2, point2 => point2[0] === point1[0] && point2[1] === point1[1])) {\n            continue;\n        }\n        if (areas.some(nextArea => find(nextArea, areaPoint => areaPoint[0] === point1[0] && areaPoint[1] === point1[1]))) {\n            if (isFirst) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        let nextArea: number[][];\n\n        if (isFirst) {\n            nextArea = [];\n            areas.push(nextArea);\n        } else {\n            nextArea = areas[areas.length - 1];\n        }\n        nextArea.push(point1);\n\n\n        const line = [point1, points1[index + 1] || points1[0]];\n        const nextPoint2 = points2.filter(point2 => {\n            return isPointOnLine(point2, line);\n        }).sort((a, b) => {\n            return getDist(point1, a) - getDist(point1, b);\n        })[0];\n\n        if (!nextPoint2) {\n            findReversedAreas(nextPoints1, points2, i + 1, areas);\n            break;\n        } else {\n            const point2Index = points2.indexOf(nextPoint2);\n\n            findReversedAreas(points2, points1, point2Index, areas);\n            if (!isFirst) {\n                break;\n            }\n        }\n    }\n    return areas;\n}\nexport function findConnectedAreas(points1: number[][], points2: number[][]) {\n    return findReversedAreas(points1, [...points2].reverse());\n}\n/**\n* Get non-overlapping areas of two shapes based on points1.\n* @memberof OverlapArea\n*/\nexport function getUnoverlapAreas(points1: number[][], points2: number[][]): number[][][] {\n    if (!points2.length) {\n        return [[...points1]];\n    }\n    const overlapAreas = getOverlapAreas(points1, points2);\n     let unoverlapAreas = [points1];\n\n    overlapAreas.forEach(overlapArea => {\n        const nextOverlapArea = [...overlapArea].reverse();\n\n        unoverlapAreas = flat(unoverlapAreas.map(area => {\n            const connectedAreas = findReversedAreas(area, nextOverlapArea);\n            const firstConnectedArea = connectedAreas[0];\n\n            if (connectedAreas.length === 1 && nextOverlapArea.every(point => firstConnectedArea.indexOf(point) === -1)) {\n                const lastPoint = firstConnectedArea[firstConnectedArea.length - 1];\n                const firstPoint = [...nextOverlapArea].sort((a, b) => {\n                    return getDist(lastPoint, a) - getDist(lastPoint, b);\n                })[0];\n                const firstIndex = nextOverlapArea.indexOf(firstPoint);\n\n                firstConnectedArea.push(\n                    ...nextOverlapArea.slice(firstIndex),\n                    ...nextOverlapArea.slice(0, firstIndex),\n                    nextOverlapArea[firstIndex],\n                    lastPoint,\n                );\n            }\n            return connectedAreas;\n        }));\n    });\n\n    return unoverlapAreas;\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/\nexport function getOverlapSize(points1: number[][], points2: number[][]): number {\n    const points = getOverlapPoints(points1, points2);\n\n    return getAreaSize(points);\n}\n"],"names":["tinyThrottle","num","throttle","TINY_NUM","isSameConstants","linearConstants1","linearConstants2","every","v","i","isSamePoint","point1","point2","flat","arr","reduce","prev","current","push","getAreaSize","points","length","Math","abs","sum","map","point","nextPoint","fitPoints","rect","width","height","left","top","_a","getMinMaxs","minX","minY","maxX","maxY","ratioX","ratioY","xs","ys","min","max","isInside","pos","excludeLine","x","y","xLine","xLinearConstants","getLinearConstants","lines","convertLines","intersectionPosInfos","forEach","line","linearConstants","standardPoint","type","xPoints","getPointsOnLines","getIntersectionPointsByConstants","some","linePoint","find","p","intersectionCount","xMap","prevValue","nextValue","getDistanceFromPointToConstants","a","b","c","x1","y1","x2","y2","dx","dy","a1","b1","c1","a2","b2","c2","isZeroA","isZeroB","results","Infinity","result","getIntersectionPoints","line1","line2","isLimit","isPointOnLine","minMaxs","order","minMax","bottom","right","filter","pointX","pointY","__spreadArrays","slice","getOverlapPointInfos","points1","points2","targetPoints1","targetPoints2","getShapeDirection","reverse","lines1","lines2","linearConstantsList1","linearConstantsList2","overlapInfos","linePointInfos","j","intersectionPoints","index1","index2","sort","getDist","isNext","index","findIndex","splice","pointMap","key","getOverlapPoints","infos","isConnectedLine","prevIndex1","prevIndex2","_b","nextIndex1","nextIndex2","getOverlapAreas","areas","area","info","findReversedAreas","isFirst","nextIndex","nextPoints1","nextArea","areaPoint","nextPoint2","point2Index","indexOf","findConnectedAreas","getUnoverlapAreas","overlapAreas","unoverlapAreas","overlapArea","nextOverlapArea","connectedAreas","firstConnectedArea","lastPoint_1","firstPoint","firstIndex","getOverlapSize"],"mappings":"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"}